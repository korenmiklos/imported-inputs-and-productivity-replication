-------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /home/koren/projects/prod-AER-replicarion-package/code/../doc/fixe
> dcost.log
  log type:  text
 opened on:   2 Jul 2015, 20:53:03

. 
. do load_specification table4_foreign 0

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Load the parameters estimated in a given specification, e.g.
> 
>         do load_specification table3_baseline 0
> */
. 
. set more off

. clear

. prog drop _all

. 
. local dir ../doc/mapreduce

. local inputfile `dir'/`1'/inputfile.dta

. local resultfile `dir'/`1'/`2'.csv

. 
. confirm file ../doc/mapreduce/`1'/TFP.dta

. confirm file `inputfile'

. confirm file `resultfile'

. confirm file map/`1'.do

. 
. 
. /* load parameters and set globals*/
. do map/`1'.do

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Set necessary constants for a specification. 
> This do-file cannot be run by itself, it is called by "estimate_specification
> .do".
> */
. 
. global datafile ../data/impmanuf

. 
. /* LHS variable*/
. global output PlnQ

. 
. /* proxies for demand */
. global demand lnQs2 corrected_firm_demand

. /* RHS variables identified in the first stage*/
. global free ""

. 
. /* There are two kinds of state variables.
> $states are in the production function.
> $bygroup, $dummies
>     affect the investment decision, hence are in the proxy, but do not direct
> ly affect TFP. */
. 
. /* proxy for productivity */
. global proxy inv

. /* proxy function is estimated separately for each group */
. global bygroup year

. /* simple linear dummies to include in both proxy and prod fcn */
. * these are now included separately, first is the longest, to absorb
. global dummies nace2year me

. /* state variables */
. global states lnK lnL afterforeign 

. /* these states only enter linearly */
. global linear demand_1 demand_2  

. /* instruments should include all states and lags */
. global instruments lnK L.lnK lnL L.lnL afterforeign L.afterforeign demand_1 L
> .demand_1 demand_2  

. /* separate import-augmenting productivity for foreign and domestic firms */
. global IAPgroup afterforeign

. 
. 
. /* product count is based on the number of 4-digit categories */
. global Ni N4i

. /* this is not a sector-specific estimation */
. global sector 0

. 
. /* define expression for sample */
. global sample 1==1

. 
. 
. 
end of do-file

. 
. insheet using `resultfile', comma case
(412 vars, 1 obs)

. 
. * name parameters consistenly with text
. ren b_lnK alphastar

. ren b_lnL betastar

. ren b_PlnM gammastar

. 
. * count IAP groups
. reshape long ahat shat, i(egy) j(IAPgroup)
(note: j = 1 2)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->       2
Number of variables                 412   ->     411
j variable (2 values)                     ->   IAPgroup
xij variables:
                            ahat1 ahat2   ->   ahat
                            shat1 shat2   ->   shat
-----------------------------------------------------------------------------

. su IAPgroup

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
    IAPgroup |          2         1.5    .7071068          1          2

. local IAPgroups = r(max)

. reshape wide
(note: j = 1 2)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                        2   ->       1
Number of variables                 411   ->     412
j variable (2 values)          IAPgroup   ->   (dropped)
xij variables:
                                   ahat   ->   ahat1 ahat2
                                   shat   ->   shat1 shat2
-----------------------------------------------------------------------------

. 
. * save Gn into a matrix
. reshape long Gn, i(egy) j(n)
(note: j = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
> 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
>  52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 7
> 7 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 1
> 02 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 12
> 1 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
>  141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
> 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 1
> 79 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 19
> 8 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
>  218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 
> 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 2
> 56 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 27
> 5 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
>  295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 
> 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 3
> 33 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 35
> 2 353 354 355 356 357 358 359 360 361 362 363 364 365 366)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->     367
Number of variables                 412   ->      47
j variable (367 values)                   ->   n
xij variables:
                      Gn0 Gn1 ... Gn366   ->   Gn
-----------------------------------------------------------------------------

. tsset n
        time variable:  n, 0 to 366
                delta:  1 unit

. mkmat Gn

. 
. reshape wide
(note: j = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
> 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
>  52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 7
> 7 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 1
> 02 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 12
> 1 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
>  141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
> 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 1
> 79 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 19
> 8 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
>  218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 
> 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 2
> 56 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 27
> 5 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
>  295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 
> 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 3
> 33 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 35
> 2 353 354 355 356 357 358 359 360 361 362 363 364 365 366)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                      367   ->       1
Number of variables                  47   ->     412
j variable (367 values)               n   ->   (dropped)
xij variables:
                                     Gn   ->   Gn0 Gn1 ... Gn366
-----------------------------------------------------------------------------

. 
. * save all other params into scalars
. drop Gn*

. unab params : _all

. foreach param in `params' {
  2.         scalar `param' = `param'[1]
  3. }

. 
. clear

. 
. * define functions to calculate Gn and its inverse
. /* mapping from N to GN and back */
. prog def GN
  1.     syntax newvarlist(max=1), n(string)
  2. 
.     qui gen `varlist' = .
  3.     forval i=1/367 {
  4.         qui replace `varlist' = Gn[`i',1] if `n'+1==`i'
  5.     }
  6. end

. 
. use ../doc/mapreduce/`1'/TFP

. drop __*

. 
. * create firm-specific variables
. qui su IAPgroup

. local IAPgroups = r(max)

. foreach X in a ahat shat B {
  2.         gen `X' = .
  3.         forval j=1/`IAPgroups' {
  4.                 replace `X' = `X'`j' if IAPgroup==`j'
  5.         }
  6. }
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)

. drop Gn

. GN Gn, n(Ni)

. 
. gen nu = (PlnQ+log(price_2digit/100))-gammastar*(PlnM+log(price_material/100)
> )-gammastar*ahat*Gn-epsilonstar
(179 missing values generated)

. 
. * mean unobserved TFP shock
. gen ee = exp(epsilonstar)
(179 missing values generated)

. 
. * ensure that total industry revenue is same in model as in data
. * this does not have E(exp epsilon) yet
. gen data_revenue = exp(PlnQ+log(price_2digit/100))

. foreach X of var *_revenue {
  2.         egen mean_`X' = mean(`X'), by(nace2 year)
  3. }

. 
. gen weight = data_revenue/ee
(179 missing values generated)

. 
. egen sum_exp_e = sum(ee*weight) if !missing(ee,weight), by(nace2 year)
(179 missing values generated)

. egen sum_weight = sum(weight) if !missing(ee,weight), by(nace2 year)
(179 missing values generated)

. gen Eee = sum_exp_e/sum_weight
(179 missing values generated)

. 
. * See equation A6 in Appendix A
. gen model_revenue = gammastar^(gammastar/(1-gammastar))*exp((nu+gammastar*aha
> t*Gn)/(1-gammastar))*Eee^(1/(1-gammastar))
(179 missing values generated)

. gen pi0 = (1-gammastar)*gammastar^(gammastar/(1-gammastar))*exp(nu/(1-gammast
> ar))*Eee^(1/(1-gammastar))
(179 missing values generated)

. gen lnpi0 = ln(pi0)
(179 missing values generated)

. 
. *************** some automated tests
. * lnpi0 should be collinear with nu
. areg lnpi0 nu, a(nace2year)

Linear regression, absorbing indicators         Number of obs     =    127,293
                                                F(   1, 127030)   =          .
                                                Prob > F          =          .
                                                R-squared         =     1.0000
                                                Adj R-squared     =     1.0000
                                                Root MSE          =     0.0000

------------------------------------------------------------------------------
       lnpi0 |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
          nu |   4.038644          .        .       .            .           .
       _cons |  -2.068071          .        .       .            .           .
-------------+----------------------------------------------------------------
   nace2year |    F(261, 127030) =          .       .         (262 categories)

. assert e(r2)>0.9999

. * nu should have values whenever its components have
. count if !missing(PlnQ,PlnM,epsilonstar)
  127,293

. scalar n1 = r(N)

. count if !missing(nu)
  127,293

. assert n1 == r(N)

. * G(0)=0
. su Gn if Ni==0

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
          Gn |     78,273           0           0          0          0

. assert r(mean)==0

. * each Ni has a G(Ni)
. gen byte noGn = missing(Gn) & !missing(Ni)

. su noGn

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
        noGn |    127,472           0           0          0          0

. assert r(max)==0

. drop noGn

. * each IAPgroup has a separate ahat
. tab IAPgroup

group(after |
   foreign) |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |    103,929       81.53       81.53
          2 |     23,543       18.47      100.00
------------+-----------------------------------
      Total |    127,472      100.00

. scalar n1 = r(r)

. tab ahat

       ahat |      Freq.     Percent        Cum.
------------+-----------------------------------
   .2710939 |    103,929       81.53       81.53
    .390417 |     23,543       18.47      100.00
------------+-----------------------------------
      Total |    127,472      100.00

. assert n1 == r(r)

. 
. set more on

. 
. 
end of do-file

. scalar eta = 1/b_demand_1

. 
. global conditioning omegastar $states $linear

. 
. 
. tempvar Gn Gnminus Gnplus lower upper gammaimax

. local N Ni

. 
. gen byte nonimporter = (Ni==0)*100

. drop importer

. 
. forval j = 0/1 {
  2.         su lnL if Ni==0 & afterforeign==`j'
  3.         scalar lnL_`j' = r(mean)
  4.         su nonimporter if afterforeign==`j'
  5.         local nonimporters_`j' `r(mean)'
  6. }

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
         lnL |     71,476    1.920078    1.251593          0   10.03675

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
 nonimporter |    103,929    68.77387     46.3418          0        100

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
         lnL |      6,797     1.75312    1.329151          0   8.324821

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
 nonimporter |     23,543    28.87058    45.31705          0        100

. 
. foreach X in u_jt mean_U_jt median_u_jt mean_log_fixed_cost conditional_mean_
> fixed_cost f_lower f_upper lower_bound upper_bound {
  2.         gen `X' = .
  3. }
(127,472 missing values generated)
(127,472 missing values generated)
(127,472 missing values generated)
(127,472 missing values generated)
(127,472 missing values generated)
(127,472 missing values generated)
(127,472 missing values generated)
(127,472 missing values generated)
(127,472 missing values generated)

. gen cumulated_exp_mu = 0

. 
. matrix exp_mu_n = J(366,2,0)

. 
. * separately for domestic and foreign
. forval foreign=0/1 {
  2.         * estimate distribution of fixed costs by ordered probit
.         oprobit Ni lnpi0 if afterforeign==`foreign'
  3.         local number_of_cutoffs = e(k_cat)-1
  4.         scalar sigma = 1/_b[lnpi0]
  5.         scalar sigma_`foreign' = sigma
  6.         matrix B = e(b)
  7.         matrix k = e(cat)
  8. 
.         tempvar predict
  9.         predict `predict', xb
 10.         * this is zeta'z_j 
.         gen mean_log_fixed_cost_`foreign' = lnpi0-sigma*`predict'
 11.         replace mean_log_fixed_cost = mean_log_fixed_cost_`foreign' if aft
> erforeign==`foreign'
 12. 
.         su ahat if afterforeign==`foreign'
 13.         scalar a_scalar = r(mean)
 14. 
.         * initalize running variables
.         scalar previous_n = 0
 15. 
.         forval i=1/`number_of_cutoffs' {
 16.                 matrix alpha = B["y1", "cut`i':_cons"]
 17.                 * marginal gain of moving from n-1 to n
.                 scalar current_n = k[1,`i'+1]
 18. 
.                 * after a gap, say, 152, 153, 160, assign marginal cost to 15
> 4
.                 * marginal cost in between, n=155,...,160 is zero
.                 * we know that 154 has not been chosen
.                 matrix exp_mu_n[previous_n+1,`foreign'+1] = exp(alpha[1,1]*si
> gma)*(exp(a_scalar*gammastar/(1-gammastar)*Gn[current_n+1,1]) - exp(a_scalar*
> gammastar/(1-gammastar)*Gn[previous_n+1,1]))
 19.                 
.                 qui replace lower_bound = lnpi0-mean_log_fixed_cost-sigma*alp
> ha[1,1] if Ni==previous_n & afterforeign==`foreign'
 20.                 qui replace upper_bound = lnpi0-mean_log_fixed_cost-sigma*
> alpha[1,1] if Ni==current_n & afterforeign==`foreign'
 21.                 
.                 qui replace cumulated_exp_mu = cumulated_exp_mu+exp_mu_n[curr
> ent_n,`foreign'+1] if Ni>=current_n & afterforeign==`foreign'
 22.                 
.                 scalar previous_n = current_n
 23.         }
 24.         qui replace f_lower = cumulated_exp_mu*exp(mean_log_fixed_cost+low
> er_bound) if afterforeign==`foreign'
 25.         qui replace f_upper = cumulated_exp_mu*exp(mean_log_fixed_cost+upp
> er_bound) if afterforeign==`foreign'
 26.         * draw random realization of u_jt
.         qui replace upper_bound = 10*sigma if missing(upper_bound) & afterfor
> eign==`foreign'
 27.         qui replace u_jt = invnormal(normal(lower_bound/sigma)+uniform()*(
> normal(upper_bound/sigma)-normal(lower_bound/sigma)))*sigma if afterforeign==
> `foreign'
 28.         * use the formula for truncated lognormal to calculate the conditi
> onal mean
.         qui replace mean_U_jt = exp(sigma^2/2)*(normal(sigma-lower_bound/sigm
> a)-normal(sigma-upper_bound/sigma))/(normal(upper_bound/sigma)-normal(lower_b
> ound/sigma)) if afterforeign==`foreign'
 29.         qui replace median_u_jt = invnormal(normal(lower_bound/sigma)+0.5*
> (normal(upper_bound/sigma)-normal(lower_bound/sigma)))*sigma if afterforeign=
> =`foreign'
 30.         qui replace conditional_mean_fixed_cost = cumulated_exp_mu*exp(mea
> n_log_fixed_cost)*mean_U_jt if afterforeign==`foreign'
 31. 
. }

Iteration 0:   log likelihood = -155239.38  
Iteration 1:   log likelihood = -145500.61  
Iteration 2:   log likelihood = -145420.67  
Iteration 3:   log likelihood = -145420.64  
Iteration 4:   log likelihood = -145420.64  

Ordered probit regression                       Number of obs     =    103,797
                                                LR chi2(1)        =   19637.49
                                                Prob > chi2       =     0.0000
Log likelihood = -145420.64                     Pseudo R2         =     0.0632

------------------------------------------------------------------------------
          Ni |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
       lnpi0 |    .364317   .0026793   135.98   0.000     .3590657    .3695683
-------------+----------------------------------------------------------------
       /cut1 |   1.591301    .009434                       1.57281    1.609791
       /cut2 |   1.896211   .0097909                      1.877021    1.915401
       /cut3 |   2.084345   .0100797                      2.064589    2.104101
       /cut4 |   2.218508    .010321                      2.198279    2.238737
       /cut5 |   2.327256   .0105393                      2.306599    2.347912
       /cut6 |   2.421964   .0107458                      2.400903    2.443025
       /cut7 |   2.507496   .0109465                      2.486041    2.528951
       /cut8 |   2.582932   .0111366                      2.561105    2.604759
       /cut9 |   2.655586   .0113324                      2.633375    2.677797
      /cut10 |    2.72459    .011532                      2.701987    2.747192
      /cut11 |   2.787894   .0117279                      2.764907     2.81088
      /cut12 |   2.845653   .0119177                      2.822295    2.869012
      /cut13 |   2.902839   .0121163                      2.879092    2.926587
      /cut14 |   2.956278    .012312                      2.932147     2.98041
      /cut15 |   3.007208   .0125086                      2.982692    3.031724
      /cut16 |   3.056959    .012711                      3.032046    3.081872
      /cut17 |   3.100107   .0128955                      3.074832    3.125381
      /cut18 |   3.145445   .0130987                      3.119772    3.171118
      /cut19 |   3.190725   .0133119                      3.164634    3.216816
      /cut20 |   3.240597   .0135593                      3.214021    3.267172
      /cut21 |   3.285201   .0137919                       3.25817    3.312233
      /cut22 |    3.32475   .0140078                      3.297295    3.352205
      /cut23 |   3.368019    .014255                      3.340079    3.395958
      /cut24 |   3.405574   .0144789                      3.377196    3.433952
      /cut25 |   3.444872   .0147237                      3.416014     3.47373
      /cut26 |   3.486973   .0149993                      3.457575    3.516371
      /cut27 |   3.522827   .0152448                      3.492948    3.552707
      /cut28 |   3.553692   .0154645                      3.523382    3.584002
      /cut29 |   3.588166   .0157199                      3.557356    3.618977
      /cut30 |   3.621562   .0159777                      3.590246    3.652877
      /cut31 |   3.651443   .0162168                      3.619659    3.683227
      /cut32 |    3.68766   .0165172                      3.655287    3.720033
      /cut33 |   3.727495   .0168625                      3.694445    3.760545
      /cut34 |   3.750367   .0170684                      3.716914    3.783821
      /cut35 |   3.783677   .0173782                      3.749616    3.817737
      /cut36 |   3.810435   .0176371                      3.775867    3.845003
      /cut37 |   3.843466   .0179696                      3.808246    3.878685
      /cut38 |   3.869881   .0182453                      3.834121    3.905641
      /cut39 |   3.895509   .0185216                      3.859207    3.931811
      /cut40 |   3.930962   .0189191                      3.893881    3.968043
      /cut41 |   3.954447   .0191933                      3.916829    3.992065
      /cut42 |   3.983505   .0195448                      3.945198    4.021812
      /cut43 |   4.007591   .0198465                      3.968693    4.046489
      /cut44 |   4.032166   .0201643                      3.992645    4.071688
      /cut45 |   4.055034    .020469                      4.014915    4.095152
      /cut46 |   4.082794    .020851                      4.041927    4.123661
      /cut47 |   4.108919   .0212236                      4.067321    4.150516
      /cut48 |   4.136563   .0216338                      4.094162    4.178965
      /cut49 |   4.169499   .0221424                      4.126101    4.212897
      /cut50 |   4.192028   .0225021                      4.147925    4.236132
      /cut51 |   4.210637   .0228078                      4.165935     4.25534
      /cut52 |   4.230056   .0231366                       4.18471    4.275403
      /cut53 |   4.252548   .0235301                       4.20643    4.298666
      /cut54 |   4.289106   .0241985                      4.241678    4.336534
      /cut55 |   4.317372   .0247417                      4.268879    4.365865
      /cut56 |    4.34085   .0252116                      4.291436    4.390264
      /cut57 |   4.354448   .0254914                      4.304486    4.404411
      /cut58 |   4.372816   .0258794                      4.322094    4.423539
      /cut59 |   4.389013   .0262313                      4.337601    4.440425
      /cut60 |   4.396582   .0263988                      4.344841    4.448322
      /cut61 |   4.415281   .0268202                      4.362714    4.467847
      /cut62 |   4.431451   .0271929                      4.378154    4.484748
      /cut63 |   4.441448   .0274278                       4.38769    4.495205
      /cut64 |   4.453428   .0277144                      4.399109    4.507747
      /cut65 |   4.480296   .0283767                      4.424679    4.535913
      /cut66 |   4.493399   .0287083                      4.437132    4.549666
      /cut67 |   4.514756   .0292608                      4.457406    4.572106
      /cut68 |   4.532992   .0297447                      4.474694    4.591291
      /cut69 |   4.547662   .0301415                      4.488585    4.606738
      /cut70 |   4.574071   .0308789                      4.513549    4.634593
      /cut71 |   4.602414   .0317088                      4.540266    4.664562
      /cut72 |   4.607341    .031857                      4.544902    4.669779
      /cut73 |    4.62502   .0323966                      4.561524    4.688516
      /cut74 |   4.654376   .0333236                      4.589063    4.719689
      /cut75 |   4.668422    .033781                      4.602212    4.734631
      /cut76 |      4.686   .0343695                      4.618637    4.753363
      /cut77 |   4.714071   .0353491                      4.644788    4.783354
      /cut78 |   4.733956   .0360693                      4.663262    4.804651
      /cut79 |   4.762104    .037126                      4.689338     4.83487
      /cut80 |   4.769471   .0374103                      4.696148    4.842793
      /cut81 |   4.788516   .0381603                      4.713723    4.863309
      /cut82 |   4.820958   .0394847                      4.743569    4.898347
      /cut83 |   4.825209   .0396631                       4.74747    4.902947
      /cut84 |   4.838248   .0402176                      4.759423    4.917073
      /cut85 |   4.842681    .040408                      4.763483    4.921879
      /cut86 |   4.851663   .0407961                      4.771704    4.931622
      /cut87 |    4.86547   .0414001                      4.784327    4.946613
      /cut88 |   4.879752   .0420369                      4.797361    4.962143
      /cut89 |   4.889549   .0424806                      4.806289     4.97281
      /cut90 |   4.909771   .0434107                      4.824688    4.994855
      /cut91 |   4.925651   .0441612                      4.839096    5.012205
      /cut92 |   4.936647   .0446933                       4.84905    5.024244
      /cut93 |   4.971614   .0464436                      4.880586    5.062642
      /cut94 |   5.003357   .0481118                      4.909059    5.097654
      /cut95 |   5.016771   .0488378                      4.921051    5.112491
      /cut96 |   5.030612   .0495989                        4.9334    5.127824
      /cut97 |   5.037704    .049994                      4.939718    5.135691
      /cut98 |   5.044918   .0503994                      4.946137    5.143699
      /cut99 |   5.059737   .0512445                        4.9593    5.160174
     /cut100 |   5.067354   .0516854                      4.966053    5.168656
     /cut101 |   5.083143   .0526205                      4.980009    5.186277
     /cut102 |   5.099688   .0536285                      4.994578    5.204798
     /cut103 |    5.11686   .0546931                      5.009663    5.224057
     /cut104 |   5.125678   .0552462                      5.017398    5.233959
     /cut105 |   5.143852   .0564027                      5.033305      5.2544
     /cut106 |   5.153224   .0570081                       5.04149    5.264958
     /cut107 |   5.203368    .060362                       5.08506    5.321675
     /cut108 |   5.225194   .0618866                      5.103898    5.346489
     /cut109 |   5.248199   .0635383                      5.123666    5.372732
     /cut110 |   5.260174   .0644158                      5.133922    5.386427
     /cut111 |   5.298503   .0673312                      5.166536     5.43047
     /cut112 |   5.312175   .0684111                      5.178092    5.446259
     /cut113 |   5.326287   .0695434                      5.189984    5.462589
     /cut114 |     5.3561   .0720088                      5.214965    5.497235
     /cut115 |   5.388369   .0747962                      5.241771    5.534967
     /cut116 |   5.405573   .0763357                      5.255957    5.555188
     /cut117 |   5.423615   .0779947                      5.270749    5.576482
     /cut118 |   5.442554    .079783                      5.286182    5.598926
     /cut119 |   5.462566   .0817345                      5.302369    5.622762
     /cut120 |   5.483632   .0838436                      5.319301    5.647962
     /cut121 |   5.505446   .0860481                      5.336795    5.674097
     /cut122 |   5.528262   .0883993                      5.355002    5.701521
     /cut123 |   5.578783   .0939324                      5.394678    5.762887
     /cut124 |   5.606938   .0972111                      5.416408    5.797469
     /cut125 |   5.637236   .1008778                      5.439519    5.834953
     /cut126 |   5.670025   .1050141                      5.464201    5.875848
     /cut127 |   5.705652   .1097027                      5.490639    5.920666
     /cut128 |   5.744633   .1150745                      5.519091    5.970175
     /cut129 |   5.788164   .1214576                      5.550111    6.026217
     /cut130 |   5.895062   .1390843                      5.622461    6.167662
     /cut131 |   5.965657   .1528024                       5.66617    6.265144
     /cut132 |   6.056813   .1731502                      5.717445    6.396181
     /cut133 |   6.173265   .2017404                      5.777862    6.568669
     /cut134 |   6.329626   .2451023                      5.849234    6.810018
     /cut135 |   6.580561   .3338978                      5.926133    7.234989
------------------------------------------------------------------------------
(179 missing values generated)
(179 missing values generated)
(103,797 real changes made)

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
        ahat |    103,929    .2710939           0   .2710939   .2710939

Iteration 0:   log likelihood = -79518.095  
Iteration 1:   log likelihood = -74367.358  
Iteration 2:   log likelihood = -74334.511  
Iteration 3:   log likelihood = -74334.478  
Iteration 4:   log likelihood = -74334.478  

Ordered probit regression                       Number of obs     =     23,496
                                                LR chi2(1)        =   10367.23
                                                Prob > chi2       =     0.0000
Log likelihood = -74334.478                     Pseudo R2         =     0.0652

------------------------------------------------------------------------------
          Ni |      Coef.   Std. Err.      z    P>|z|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
       lnpi0 |   .3823579   .0038365    99.66   0.000     .3748384    .3898774
-------------+----------------------------------------------------------------
       /cut1 |   .6734174   .0154352                       .643165    .7036698
       /cut2 |   .9636808   .0155444                      .9332144    .9941472
       /cut3 |   1.126479   .0157075                      1.095693    1.157265
       /cut4 |   1.258824   .0158892                      1.227682    1.289966
       /cut5 |   1.373904   .0160834                      1.342381    1.405427
       /cut6 |   1.464405   .0162595                      1.432537    1.496273
       /cut7 |   1.545089   .0164344                      1.512879      1.5773
       /cut8 |   1.619145    .016609                      1.586592    1.651698
       /cut9 |    1.68986   .0167855                      1.656961    1.722759
      /cut10 |   1.754827    .016957                      1.721592    1.788062
      /cut11 |   1.813649   .0171214                      1.780092    1.847207
      /cut12 |   1.868128   .0172817                      1.834257       1.902
      /cut13 |   1.920996   .0174447                      1.886805    1.955187
      /cut14 |   1.972726   .0176122                      1.938206    2.007245
      /cut15 |   2.023622   .0177852                      1.988763     2.05848
      /cut16 |    2.06827   .0179424                      2.033104    2.103436
      /cut17 |   2.115154    .018112                      2.079655    2.150653
      /cut18 |   2.166755   .0183039                       2.13088     2.20263
      /cut19 |   2.209777    .018468                       2.17358    2.245974
      /cut20 |   2.247728   .0186162                       2.21124    2.284215
      /cut21 |    2.29192   .0187932                      2.255086    2.328754
      /cut22 |   2.332824   .0189611                      2.295661    2.369987
      /cut23 |    2.36996   .0191167                      2.332492    2.407428
      /cut24 |   2.405482   .0192679                      2.367717    2.443246
      /cut25 |   2.446023   .0194434                      2.407914    2.484131
      /cut26 |   2.477346   .0195819                      2.438966    2.515726
      /cut27 |   2.512673    .019741                      2.473982    2.551365
      /cut28 |   2.552596   .0199252                      2.513543    2.591648
      /cut29 |    2.58905   .0200972                       2.54966     2.62844
      /cut30 |   2.619747   .0202441                       2.58007    2.659425
      /cut31 |   2.646293   .0203731                      2.606363    2.686224
      /cut32 |   2.678881    .020534                      2.638635    2.719127
      /cut33 |   2.713361   .0207077                      2.672775    2.753948
      /cut34 |   2.749369   .0208929                       2.70842    2.790319
      /cut35 |   2.785628   .0210829                      2.744307     2.82695
      /cut36 |   2.817968   .0212558                      2.776308    2.859629
      /cut37 |   2.847455   .0214159                      2.805481     2.88943
      /cut38 |   2.876139    .021573                      2.833857    2.918421
      /cut39 |   2.907587   .0217471                      2.864963     2.95021
      /cut40 |    2.93714   .0219135                       2.89419     2.98009
      /cut41 |    2.96872   .0220938                      2.925417    3.012023
      /cut42 |   2.998891   .0222685                      2.955246    3.042537
      /cut43 |   3.024878   .0224211                      2.980934    3.068823
      /cut44 |   3.055902   .0226055                      3.011596    3.100208
      /cut45 |   3.080453   .0227536                      3.035857    3.125049
      /cut46 |   3.116351   .0229735                      3.071324    3.161378
      /cut47 |   3.140846   .0231259                       3.09552    3.186172
      /cut48 |   3.167442   .0232939                      3.121787    3.213097
      /cut49 |   3.203282   .0235233                      3.157178    3.249387
      /cut50 |   3.229064   .0236909                       3.18263    3.275497
      /cut51 |   3.252639   .0238463                      3.205901    3.299377
      /cut52 |    3.27597   .0240027                      3.228925    3.323014
      /cut53 |   3.299423   .0241621                      3.252066     3.34678
      /cut54 |   3.323884   .0243306                      3.276197    3.371571
      /cut55 |   3.341772   .0244559                      3.293839    3.389704
      /cut56 |   3.365577   .0246254                      3.317312    3.413842
      /cut57 |   3.387198   .0247824                      3.338626    3.435771
      /cut58 |   3.412808   .0249721                      3.363863    3.461752
      /cut59 |   3.435614   .0251436                      3.386334    3.484895
      /cut60 |   3.458939   .0253208                      3.409311    3.508566
      /cut61 |   3.481776   .0254962                      3.431804    3.531748
      /cut62 |   3.498209    .025624                      3.447987    3.548431
      /cut63 |   3.522593   .0258159                      3.471995    3.573191
      /cut64 |   3.544247   .0259886                       3.49331    3.595183
      /cut65 |   3.563538   .0261442                      3.512297     3.61478
      /cut66 |   3.583242    .026305                      3.531685    3.634799
      /cut67 |   3.602213   .0264621                      3.550348    3.654077
      /cut68 |   3.624684   .0266511                      3.572449     3.67692
      /cut69 |   3.643951   .0268153                      3.591394    3.696508
      /cut70 |   3.664275   .0269905                      3.611375    3.717176
      /cut71 |   3.684435   .0271669                      3.631189    3.737681
      /cut72 |   3.705765   .0273564                      3.652147    3.759382
      /cut73 |   3.726941   .0275473                       3.67295    3.780933
      /cut74 |   3.747995   .0277408                      3.693625    3.802366
      /cut75 |   3.760928   .0278618                       3.70632    3.815536
      /cut76 |   3.782953   .0280708                      3.727935     3.83797
      /cut77 |   3.804053   .0282743                      3.748637     3.85947
      /cut78 |   3.824149   .0284712                      3.768346    3.879951
      /cut79 |   3.847989   .0287091                      3.791721    3.904258
      /cut80 |   3.859382   .0288247                      3.802887    3.915878
      /cut81 |   3.884396   .0290829                      3.827394    3.941397
      /cut82 |    3.90498   .0292991                      3.847555    3.962405
      /cut83 |   3.924316   .0295052                      3.866487    3.982145
      /cut84 |   3.948762   .0297711                      3.890412    4.007112
      /cut85 |   3.974112   .0300546                      3.915206    4.033018
      /cut86 |   3.991524   .0302535                      3.932229     4.05082
      /cut87 |   4.011342   .0304832                      3.951596    4.071088
      /cut88 |   4.030717   .0307127                      3.970522    4.090913
      /cut89 |   4.047468   .0309148                      3.986876     4.10806
      /cut90 |   4.066774   .0311514                      4.005718    4.127829
      /cut91 |   4.085503   .0313852                       4.02399    4.147017
      /cut92 |   4.100147   .0315705                       4.03827    4.162024
      /cut93 |   4.116234   .0317765                      4.053953    4.178515
      /cut94 |   4.133881   .0320061                       4.07115    4.196612
      /cut95 |    4.15315   .0322602                      4.089921    4.216379
      /cut96 |   4.169175   .0324746                      4.105526    4.232824
      /cut97 |   4.188148    .032733                      4.123992    4.252303
      /cut98 |   4.207652   .0330038                      4.142966    4.272338
      /cut99 |   4.233212   .0333673                      4.167813    4.298611
     /cut100 |   4.258398   .0337359                      4.192277     4.32452
     /cut101 |   4.281627   .0340848                      4.214822    4.348432
     /cut102 |   4.289053    .034198                      4.222027     4.35608
     /cut103 |    4.30414   .0344304                      4.236658    4.371622
     /cut104 |   4.324284   .0347464                      4.256182    4.392386
     /cut105 |   4.340225   .0350016                      4.271623    4.408827
     /cut106 |   4.363226   .0353776                      4.293887    4.432565
     /cut107 |   4.380172   .0356606                      4.310278    4.450066
     /cut108 |   4.408212   .0361395                       4.33738    4.479044
     /cut109 |   4.422705   .0363926                      4.351377    4.494033
     /cut110 |   4.445108   .0367924                      4.372996     4.51722
     /cut111 |   4.464478   .0371478                      4.391669    4.537286
     /cut112 |   4.474422   .0373339                      4.401249    4.547595
     /cut113 |   4.494806   .0377219                      4.420872    4.568739
     /cut114 |   4.513732   .0380896                      4.439078    4.588387
     /cut115 |   4.530999   .0384303                      4.455677    4.606321
     /cut116 |   4.550987    .038832                      4.474878    4.627096
     /cut117 |   4.569266   .0392058                      4.492424    4.646108
     /cut118 |   4.583305   .0394971                      4.505892    4.660718
     /cut119 |   4.597682   .0398004                      4.519675    4.675689
     /cut120 |   4.607451   .0400091                      4.529035    4.685868
     /cut121 |   4.622407   .0403331                      4.543356    4.701459
     /cut122 |   4.637741   .0406708                      4.558028    4.717454
     /cut123 |   4.648162   .0409031                      4.567993    4.728331
     /cut124 |    4.66958   .0413897                      4.588458    4.750703
     /cut125 |    4.68621    .041777                      4.604328    4.768091
     /cut126 |   4.706332   .0422588                      4.623506    4.789158
     /cut127 |   4.724205   .0426978                      4.640518    4.807891
     /cut128 |   4.742556   .0431553                      4.657973    4.827139
     /cut129 |   4.761436   .0436341                      4.675915    4.846958
     /cut130 |   4.764645   .0437166                      4.678963    4.850328
     /cut131 |   4.784199   .0442232                      4.697524    4.870875
     /cut132 |   4.794183   .0444849                      4.706994    4.881371
     /cut133 |    4.81123   .0449393                      4.723151     4.89931
     /cut134 |   4.821712   .0452234                      4.733076    4.910348
     /cut135 |   4.828811   .0454179                      4.739793    4.917828
     /cut136 |   4.832393   .0455166                      4.743182    4.921604
     /cut137 |   4.843252   .0458177                      4.753451    4.933053
     /cut138 |    4.85431    .046128                      4.763901    4.944719
     /cut139 |   4.865574   .0464477                      4.774538     4.95661
     /cut140 |   4.888723    .047116                      4.796377    4.981068
     /cut141 |     4.9087   .0477057                      4.815199    5.002201
     /cut142 |   4.921019   .0480759                      4.826792    5.015246
     /cut143 |   4.925189   .0482025                      4.830713    5.019664
     /cut144 |   4.942211   .0487271                      4.846708    5.037715
     /cut145 |   4.955338   .0491394                      4.859027     5.05165
     /cut146 |   4.968765   .0495674                      4.871615    5.065916
     /cut147 |   4.973307   .0497135                      4.875871    5.070744
     /cut148 |   4.987185   .0501657                      4.888862    5.085508
     /cut149 |   4.996644   .0504788                      4.897708    5.095581
     /cut150 |   5.016044   .0511314                      4.915828     5.11626
     /cut151 |   5.031048   .0516464                      4.929823    5.132273
     /cut152 |   5.046396   .0521801                      4.944125    5.148668
     /cut153 |   5.051593   .0523624                      4.948965    5.154222
     /cut154 |   5.067509    .052929                       4.96377    5.171248
     /cut155 |   5.095025   .0539316                      4.989321     5.20073
     /cut156 |   5.112121   .0545676                      5.005171    5.219072
     /cut157 |   5.117927   .0547861                      5.010548    5.225306
     /cut158 |   5.147994   .0559463                      5.038341    5.257647
     /cut159 |   5.160513   .0564426                      5.049887    5.271138
     /cut160 |   5.199944    .058059                       5.08615    5.313737
     /cut161 |   5.213831   .0586509                      5.098877    5.328785
     /cut162 |   5.220937   .0589588                       5.10538    5.336494
     /cut163 |   5.228129   .0592727                      5.111956    5.344301
     /cut164 |   5.235402   .0595922                      5.118604    5.352201
     /cut165 |   5.265578   .0609513                      5.146115     5.38504
     /cut166 |   5.273425   .0613145                      5.153251    5.393599
     /cut167 |   5.281411   .0616887                      5.160503    5.402318
     /cut168 |   5.297733   .0624642                      5.175306    5.420161
     /cut169 |   5.306084   .0628668                      5.182868    5.429301
     /cut170 |   5.314573   .0632805                      5.190546    5.438601
     /cut171 |   5.331991   .0641441                      5.206271    5.457712
     /cut172 |   5.340953   .0645973                      5.214345    5.467562
     /cut173 |   5.350105   .0650672                      5.222575    5.477634
     /cut174 |   5.359455   .0655547                       5.23097     5.48794
     /cut175 |   5.368992   .0660586                       5.23952    5.498465
     /cut176 |   5.388681   .0671216                      5.257125    5.520237
     /cut177 |   5.398817    .067679                      5.266169    5.531466
     /cut178 |   5.409144   .0682533                       5.27537    5.542918
     /cut179 |   5.419693   .0688481                      5.284753    5.554632
     /cut180 |   5.430464   .0694636                      5.294318     5.56661
     /cut181 |   5.441507   .0701056                      5.304103    5.578912
     /cut182 |     5.4528   .0707714                       5.31409    5.591509
     /cut183 |   5.464377   .0714655                      5.324307    5.604446
     /cut184 |   5.476288    .072194                       5.33479    5.617785
     /cut185 |   5.488548   .0729591                      5.345551    5.631545
     /cut186 |   5.501191   .0737651                      5.356614    5.645768
     /cut187 |   5.514203   .0746105                      5.367969    5.660437
     /cut188 |   5.527572   .0754935                      5.379607    5.675536
     /cut189 |   5.555526    .077393                      5.403838    5.707213
     /cut190 |   5.570168   .0784175                      5.416473    5.723864
     /cut191 |   5.585278   .0794955                       5.42947    5.741086
     /cut192 |   5.669796   .0859837                      5.501271    5.838321
     /cut193 |   5.688862   .0875601                      5.517247    5.860477
     /cut194 |   5.708902   .0892726                      5.533931    5.883873
     /cut195 |   5.729923    .091122                      5.551328    5.908519
     /cut196 |   5.751898   .0931039                      5.569418    5.934378
     /cut197 |   5.775071   .0952634                      5.588358    5.961784
     /cut198 |   5.799559   .0976224                      5.608222    5.990895
     /cut199 |   5.852713   .1029858                      5.650865    6.054562
     /cut200 |   5.882057    .106132                      5.674043    6.090072
     /cut201 |     5.9139   .1097289                      5.698835    6.128964
     /cut202 |   5.948608   .1138644                      5.725438    6.171778
     /cut203 |   5.986948   .1187242                      5.754253    6.219644
     /cut204 |   6.029774   .1245284                      5.785703    6.273845
     /cut205 |   6.077679   .1314285                      5.820084    6.335274
     /cut206 |   6.131026   .1395141                      5.857583    6.404468
     /cut207 |   6.190778   .1490566                      5.898633    6.482924
     /cut208 |   6.258716   .1606106                      5.943925    6.573507
     /cut209 |   6.338041   .1752686                      5.994521    6.681562
     /cut210 |    6.57596   .2327974                      6.119685    7.032234
     /cut211 |   6.803793   .3126437                      6.191023    7.416564
------------------------------------------------------------------------------
(179 missing values generated)
(179 missing values generated)
(23,496 real changes made)

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
        ahat |     23,543     .390417           0    .390417    .390417

. 
. table Ni afterforeign if Ni<=10, c(mean u_jt)

--------------------------------
Number of |
4-digit   |
imported  |     afterforeign    
materials |         0          1
----------+---------------------
        0 |  1.252443   2.675566
        1 | -1.683175   .6789167
        2 | -2.164599   .2824737
        3 | -2.446404  -.0229642
        4 | -2.630945  -.2865899
        5 | -2.723927  -.4357597
        6 | -2.968246  -.6500462
        7 | -3.101672  -.6338424
        8 | -3.263465  -.6405287
        9 | -3.472076  -.9429839
       10 | -3.509874  -1.014843
--------------------------------

. 
. * only save fixed costs, no other parameters
. preserve

. keep id year pi0 u_jt mean_log_fixed_cost

. save ../data/simulated_fixedcosts, replace
file ../data/simulated_fixedcosts.dta saved

. restore

. 
. * overall fixed costs vs overall gains
. gen total_profit_gain = pi0*(exp(ahat*gammastar/(1-gammastar)*Gn)-1)
(179 missing values generated)

. gen total_cost_saving = totalcost*(exp(ahat*gammastar*eta/(eta-1)*Gn)-1)

. 
. 
. * report fixed costs
. gen f1 = .
(127,472 missing values generated)

. gen fnext = .
(127,472 missing values generated)

. forval foreign=0/1 {
  2.         * 0->1
.         qui replace f1 = exp(mean_log_fixed_cost)*exp_mu_n[1,`foreign'+1]*exp
> (median_u_jt) if afterforeign==`foreign'
  3.         * n->n+1
.         forval n=1/366 {
  4.                 qui replace fnext = exp(mean_log_fixed_cost)*exp_mu_n[`n',
> `foreign'+1]*exp(median_u_jt) if afterforeign==`foreign' & Ni==`n'-1
  5.         }
  6. }

. * conert all nominals to 1998 USD
. foreach X of var totalcost wages sales f_lower conditional_mean_fixed_cost f_
> upper  total_profit_gain total_cost_saving f1 fnext {
  2.         replace `X' = `X'/210.51*1e+6
  3. }
(127,472 real changes made)
(126,217 real changes made)
(127,472 real changes made)
(49,092 real changes made)
(49,092 real changes made)
(49,094 real changes made)
(49,094 real changes made)
(49,199 real changes made)
(127,291 real changes made)
(127,178 real changes made)

. su f_lower conditional_mean_fixed_cost f_upper  total_profit_gain total_cost_
> saving  wages totalcost sales  if Ni>0

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
     f_lower |     49,092    126053.9     1147450         19   1.14e+08
conditiona~t |     49,092    132283.2     1175004   29.24635   1.16e+08
     f_upper |     49,094    139028.9     1203036   40.59233   1.19e+08
total_prof~n |     49,094    961840.1    1.31e+07   40.59234   1.15e+09
total_cost~g |     49,199     1171494    2.22e+07   6.996556   1.73e+09
-------------+---------------------------------------------------------
       wages |     49,199    667077.2     4111047          0   2.48e+08
   totalcost |     49,199     6172661    7.80e+07   660.3011   6.06e+09
       sales |     49,199     6769458    7.57e+07   6.991796   4.69e+09

. foreach X of var total_profit_gain total_cost_saving wages totalcost sales {
  2.         su conditional_mean_fixed_cost if !missing(conditional_mean_fixed_
> cost,`X',pi0) & Ni>0, meanonly
  3.         scalar mean_cost = r(mean)
  4.         su `X' if !missing(conditional_mean_fixed_cost,`X',pi0) & Ni>0, me
> anonly
  5.         di in gre "Fixed costs as a percentage of `X' = " in ye mean_cost/
> r(mean)*100
  6.         gen share_in_`X' = conditional_mean_fixed_cost/`X'
  7.         su share_in_`X', meanonly
  8.         di in gre "Fixed costs as a percentage of `X' (unweighted) = " in 
> ye r(mean)*100
  9. }
Fixed costs as a percentage of total_profit_gain = 13.905147
(78,380 missing values generated)
Fixed costs as a percentage of total_profit_gain (unweighted) = 43.125242
Fixed costs as a percentage of total_cost_saving = 11.4327
(78,380 missing values generated)
Fixed costs as a percentage of total_cost_saving (unweighted) = 88.881358
Fixed costs as a percentage of wages = 20.094985
(1,434 missing values generated)
Fixed costs as a percentage of wages (unweighted) = 8.2601554
Fixed costs as a percentage of totalcost = 2.1643872
(181 missing values generated)
Fixed costs as a percentage of totalcost (unweighted) = 1.1453319
Fixed costs as a percentage of sales = 1.9856826
(181 missing values generated)
Fixed costs as a percentage of sales (unweighted) = 2.6387517

. 
. gen byte importer = Ni>0

. 
. preserve

. * save fixed costs estimates in table 7
. collapse (median) f1 fnext, by(importer afterforeign)

. reshape long f, i(importer afterforeign) j(measure) string
(note: j = 1 next)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        4   ->       8
Number of variables                   4   ->       4
j variable (2 values)                     ->   measure
xij variables:
                               f1 fnext   ->   f
-----------------------------------------------------------------------------

. reshape wide f, i(afterforeign measure) j(importer)
(note: j = 0 1)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                        8   ->       4
Number of variables                   4   ->       4
j variable (2 values)          importer   ->   (dropped)
xij variables:
                                      f   ->   f0 f1
-----------------------------------------------------------------------------

. 
. ren f0 Nonimporter

. ren f1 Importer

. replace measure="Cost of importing first product" if measure=="1"
variable measure was str4 now str31
(2 real changes made)

. replace measure="Cost of importing next product" if measure=="next"
(2 real changes made)

. gen row=cond(afterforeign, "Foreign", "Domestic")

. drop afterforeign

. 
. order measure row Nonimporter Importer

. outsheet using ../text/tables/table7-fixed-costs.csv, replace comma

. restore

. 
. * hypethetical fixed costs for the median firms
. forval foreign=0/1 {
  2.         gen median_importers_fixed_cost_`foreign' = .
  3.         su mean_log_fixed_cost if afterforeign==`foreign' & Ni>0, d 
  4.         local median = r(p50)
  5.         su u_jt if afterforeign==`foreign' & Ni>0, d 
  6.         local median = r(p50)+`median'
  7.         forval n=1/366 {
  8.                 qui replace median_importers_fixed_cost_`foreign' = 1e+6/2
> 10.51*exp(`median')*exp_mu_n[`n',`foreign'+1] if afterforeign==`foreign' & Ni
> ==`n'
  9.         }
 10. }
(127,472 missing values generated)

                     mean_log_fixed_cost
-------------------------------------------------------------
      Percentiles      Smallest
 1%    -2.83e-07      -5.22e-07
 5%    -1.56e-07      -3.27e-07
10%    -1.31e-07      -3.27e-07       Obs              32,387
25%    -6.52e-08      -3.27e-07       Sum of Wgt.      32,387

50%     7.79e-11                      Mean          -1.66e-10
                        Largest       Std. Dev.      1.03e-07
75%     6.47e-08       3.27e-07
90%     1.30e-07       3.27e-07       Variance       1.06e-14
95%     1.56e-07       3.27e-07       Skewness      -.0116833
99%     2.80e-07       3.90e-07       Kurtosis       3.631382

                            u_jt
-------------------------------------------------------------
      Percentiles      Smallest
 1%    -7.482639      -11.43342
 5%    -5.898529      -11.37602
10%     -5.10938      -10.90019       Obs              32,386
25%    -3.885935      -10.69291       Sum of Wgt.      32,386

50%    -2.635869                      Mean          -2.748089
                        Largest       Std. Dev.      1.808225
75%    -1.472851       2.955966
90%    -.5468224       3.001092       Variance       3.269676
95%    -.0038389       3.084889       Skewness      -.3746611
99%      1.01373       3.905407       Kurtosis       3.289911
(127,472 missing values generated)

                     mean_log_fixed_cost
-------------------------------------------------------------
      Percentiles      Smallest
 1%    -2.92e-07      -5.43e-07
 5%    -2.07e-07      -5.30e-07
10%    -1.43e-07      -4.38e-07       Obs              16,707
25%    -6.84e-08      -3.90e-07       Sum of Wgt.      16,707

50%     1.15e-10                      Mean           3.07e-10
                        Largest       Std. Dev.      1.18e-07
75%     6.96e-08       3.12e-07
90%     1.44e-07       4.64e-07       Variance       1.38e-14
95%     2.08e-07       5.26e-07       Skewness      -.0091349
99%     2.90e-07       5.67e-07       Kurtosis       3.393036

                            u_jt
-------------------------------------------------------------
      Percentiles      Smallest
 1%    -5.997391      -8.555496
 5%    -4.423921      -8.490876
10%    -3.692788      -8.369738       Obs              16,706
25%    -2.453314      -8.257631       Sum of Wgt.      16,706

50%    -1.070703                      Mean          -1.089046
                        Largest       Std. Dev.      2.022202
75%     .2814291       5.295743
90%     1.516039       5.924554       Variance       4.089301
95%     2.197661       5.960392       Skewness       -.061506
99%     3.575831       5.990685       Kurtosis       2.961459

. tempvar tag

. egen `tag' = tag(afterforeign Ni)

. line median_importers_fixed_cost_0 median_importers_fixed_cost_1 Ni if Ni<=10
>  & Ni>=1 & `tag', sort xlabel(1 2 3 4 5 6 7 8 9 10) legend(order(1 "Domestic 
> firms" 2 "Foreign firms")) ytitle("Fixed cost of median importer (USD)") xtit
> le(Number of products)

. graph save ../text/graphs/fixed_cost_function.gph, replace
(file ../text/graphs/fixed_cost_function.gph saved)

. 
. preserve

. 
. * save fixed cost cutoffs
. clear

. svmat exp_mu_n
number of observations will be reset to 366
Press any key to continue, or Break to abort
number of observations (_N) was 0, now 366

. gen n = _n

. ren exp_mu_n1 exp_mu_n_0

. ren exp_mu_n2 exp_mu_n_1

. order n exp*

. outsheet using ../data/fixed_cost_mu_estimates.csv, comma names replace

. 
. * automated tests
. do load_fixed_costs

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Load estimated fixed costs into memory.
> */
. insheet using ../data/fixed_cost_mu_estimates.csv, comma names clear
(3 vars, 366 obs)

. mkmat exp_mu_n_0 exp_mu_n_1, matrix(exp_mu_n)

. matrix cumulated_exp_mu = J(366,2,0)

. forval foreign = 1/2 {
  2.         matrix cumulated_exp_mu[1,`foreign'] = exp_mu_n[1,`foreign']
  3.         forval n=2/366 {
  4.                 matrix cumulated_exp_mu[`n',`foreign'] = cumulated_exp_mu[
> `n'-1,`foreign']+exp_mu_n[`n',`foreign']      
  5.         }
  6. }

. 
end of do-file

. do load_specification table4_foreign 0

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Load the parameters estimated in a given specification, e.g.
> 
>         do load_specification table3_baseline 0
> */
. 
. set more off

. clear

. prog drop _all

. 
. local dir ../doc/mapreduce

. local inputfile `dir'/`1'/inputfile.dta

. local resultfile `dir'/`1'/`2'.csv

. 
. confirm file ../doc/mapreduce/`1'/TFP.dta

. confirm file `inputfile'

. confirm file `resultfile'

. confirm file map/`1'.do

. 
. 
. /* load parameters and set globals*/
. do map/`1'.do

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Set necessary constants for a specification. 
> This do-file cannot be run by itself, it is called by "estimate_specification
> .do".
> */
. 
. global datafile ../data/impmanuf

. 
. /* LHS variable*/
. global output PlnQ

. 
. /* proxies for demand */
. global demand lnQs2 corrected_firm_demand

. /* RHS variables identified in the first stage*/
. global free ""

. 
. /* There are two kinds of state variables.
> $states are in the production function.
> $bygroup, $dummies
>     affect the investment decision, hence are in the proxy, but do not direct
> ly affect TFP. */
. 
. /* proxy for productivity */
. global proxy inv

. /* proxy function is estimated separately for each group */
. global bygroup year

. /* simple linear dummies to include in both proxy and prod fcn */
. * these are now included separately, first is the longest, to absorb
. global dummies nace2year me

. /* state variables */
. global states lnK lnL afterforeign 

. /* these states only enter linearly */
. global linear demand_1 demand_2  

. /* instruments should include all states and lags */
. global instruments lnK L.lnK lnL L.lnL afterforeign L.afterforeign demand_1 L
> .demand_1 demand_2  

. /* separate import-augmenting productivity for foreign and domestic firms */
. global IAPgroup afterforeign

. 
. 
. /* product count is based on the number of 4-digit categories */
. global Ni N4i

. /* this is not a sector-specific estimation */
. global sector 0

. 
. /* define expression for sample */
. global sample 1==1

. 
. 
. 
end of do-file

. 
. insheet using `resultfile', comma case
(412 vars, 1 obs)

. 
. * name parameters consistenly with text
. ren b_lnK alphastar

. ren b_lnL betastar

. ren b_PlnM gammastar

. 
. * count IAP groups
. reshape long ahat shat, i(egy) j(IAPgroup)
(note: j = 1 2)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->       2
Number of variables                 412   ->     411
j variable (2 values)                     ->   IAPgroup
xij variables:
                            ahat1 ahat2   ->   ahat
                            shat1 shat2   ->   shat
-----------------------------------------------------------------------------

. su IAPgroup

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
    IAPgroup |          2         1.5    .7071068          1          2

. local IAPgroups = r(max)

. reshape wide
(note: j = 1 2)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                        2   ->       1
Number of variables                 411   ->     412
j variable (2 values)          IAPgroup   ->   (dropped)
xij variables:
                                   ahat   ->   ahat1 ahat2
                                   shat   ->   shat1 shat2
-----------------------------------------------------------------------------

. 
. * save Gn into a matrix
. reshape long Gn, i(egy) j(n)
(note: j = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
> 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
>  52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 7
> 7 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 1
> 02 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 12
> 1 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
>  141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
> 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 1
> 79 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 19
> 8 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
>  218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 
> 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 2
> 56 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 27
> 5 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
>  295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 
> 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 3
> 33 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 35
> 2 353 354 355 356 357 358 359 360 361 362 363 364 365 366)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->     367
Number of variables                 412   ->      47
j variable (367 values)                   ->   n
xij variables:
                      Gn0 Gn1 ... Gn366   ->   Gn
-----------------------------------------------------------------------------

. tsset n
        time variable:  n, 0 to 366
                delta:  1 unit

. mkmat Gn

. 
. reshape wide
(note: j = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
> 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
>  52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 7
> 7 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 1
> 02 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 12
> 1 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
>  141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
> 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 1
> 79 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 19
> 8 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
>  218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 
> 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 2
> 56 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 27
> 5 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
>  295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 
> 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 3
> 33 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 35
> 2 353 354 355 356 357 358 359 360 361 362 363 364 365 366)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                      367   ->       1
Number of variables                  47   ->     412
j variable (367 values)               n   ->   (dropped)
xij variables:
                                     Gn   ->   Gn0 Gn1 ... Gn366
-----------------------------------------------------------------------------

. 
. * save all other params into scalars
. drop Gn*

. unab params : _all

. foreach param in `params' {
  2.         scalar `param' = `param'[1]
  3. }

. 
. clear

. 
. * define functions to calculate Gn and its inverse
. /* mapping from N to GN and back */
. prog def GN
  1.     syntax newvarlist(max=1), n(string)
  2. 
.     qui gen `varlist' = .
  3.     forval i=1/367 {
  4.         qui replace `varlist' = Gn[`i',1] if `n'+1==`i'
  5.     }
  6. end

. 
. use ../doc/mapreduce/`1'/TFP

. drop __*

. 
. * create firm-specific variables
. qui su IAPgroup

. local IAPgroups = r(max)

. foreach X in a ahat shat B {
  2.         gen `X' = .
  3.         forval j=1/`IAPgroups' {
  4.                 replace `X' = `X'`j' if IAPgroup==`j'
  5.         }
  6. }
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)

. drop Gn

. GN Gn, n(Ni)

. 
. gen nu = (PlnQ+log(price_2digit/100))-gammastar*(PlnM+log(price_material/100)
> )-gammastar*ahat*Gn-epsilonstar
(179 missing values generated)

. 
. * mean unobserved TFP shock
. gen ee = exp(epsilonstar)
(179 missing values generated)

. 
. * ensure that total industry revenue is same in model as in data
. * this does not have E(exp epsilon) yet
. gen data_revenue = exp(PlnQ+log(price_2digit/100))

. foreach X of var *_revenue {
  2.         egen mean_`X' = mean(`X'), by(nace2 year)
  3. }

. 
. gen weight = data_revenue/ee
(179 missing values generated)

. 
. egen sum_exp_e = sum(ee*weight) if !missing(ee,weight), by(nace2 year)
(179 missing values generated)

. egen sum_weight = sum(weight) if !missing(ee,weight), by(nace2 year)
(179 missing values generated)

. gen Eee = sum_exp_e/sum_weight
(179 missing values generated)

. 
. * See equation A6 in Appendix A
. gen model_revenue = gammastar^(gammastar/(1-gammastar))*exp((nu+gammastar*aha
> t*Gn)/(1-gammastar))*Eee^(1/(1-gammastar))
(179 missing values generated)

. gen pi0 = (1-gammastar)*gammastar^(gammastar/(1-gammastar))*exp(nu/(1-gammast
> ar))*Eee^(1/(1-gammastar))
(179 missing values generated)

. gen lnpi0 = ln(pi0)
(179 missing values generated)

. 
. *************** some automated tests
. * lnpi0 should be collinear with nu
. areg lnpi0 nu, a(nace2year)

Linear regression, absorbing indicators         Number of obs     =    127,293
                                                F(   1, 127030)   =          .
                                                Prob > F          =          .
                                                R-squared         =     1.0000
                                                Adj R-squared     =     1.0000
                                                Root MSE          =     0.0000

------------------------------------------------------------------------------
       lnpi0 |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
          nu |   4.038644          .        .       .            .           .
       _cons |  -2.068071          .        .       .            .           .
-------------+----------------------------------------------------------------
   nace2year |    F(261, 127030) =          .       .         (262 categories)

. assert e(r2)>0.9999

. * nu should have values whenever its components have
. count if !missing(PlnQ,PlnM,epsilonstar)
  127,293

. scalar n1 = r(N)

. count if !missing(nu)
  127,293

. assert n1 == r(N)

. * G(0)=0
. su Gn if Ni==0

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
          Gn |     78,273           0           0          0          0

. assert r(mean)==0

. * each Ni has a G(Ni)
. gen byte noGn = missing(Gn) & !missing(Ni)

. su noGn

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
        noGn |    127,472           0           0          0          0

. assert r(max)==0

. drop noGn

. * each IAPgroup has a separate ahat
. tab IAPgroup

group(after |
   foreign) |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |    103,929       81.53       81.53
          2 |     23,543       18.47      100.00
------------+-----------------------------------
      Total |    127,472      100.00

. scalar n1 = r(r)

. tab ahat

       ahat |      Freq.     Percent        Cum.
------------+-----------------------------------
   .2710939 |    103,929       81.53       81.53
    .390417 |     23,543       18.47      100.00
------------+-----------------------------------
      Total |    127,472      100.00

. assert n1 == r(r)

. 
. set more on

. 
. 
end of do-file

. merge 1:1 id year using ../data/simulated_fixedcosts, keep(match)

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                           127,472  (_merge==3)
    -----------------------------------------

. drop _m

. drop importer

. do simulate_entry

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Given a set of parameter values, calculate the optimal number "n" of imported
>  products for each firm.
> */
. 
. confirm numeric variable afterforeign pi0 ahat u_jt mean_log_fixed_cost

. confirm new variable N GN importer

. confirm scalar gammastar

. confirm matrix cumulated_exp_mu

. 
. gen N = 0

. replace N = . if missing(pi0,ahat,mean_log_fixed_cost,u_jt)
(181 real changes made, 181 to missing)

. tempvar profitgain fperpi

. gen `fperpi' = exp(mean_log_fixed_cost+u_jt)/pi0
(181 missing values generated)

. gen `profitgain' = 0

. forval foreign=0/1 {
  2.         forval n=1/150 {
  3.                 local net_benefit exp(ahat*gammastar/(1-gammastar)*Gn[`n'+
> 1,1])-1-`fperpi'*cumulated_exp_mu[`n',`foreign'+1] 
  4.                 qui replace N=`n' if `net_benefit'>`profitgain' &  !missin
> g(`fperpi') & afterforeign==`foreign'
  5.                 qui replace `profitgain' = `net_benefit' if `net_benefit'>
> `profitgain'  & !missing(`fperpi') & afterforeign==`foreign'
  6.         }
  7. }

. 
. GN GN, n(N)

. tab N if N<=10

          N |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |     78,199       69.74       69.74
          1 |     11,171        9.96       79.71
          2 |      5,941        5.30       85.00
          3 |      3,942        3.52       88.52
          4 |      2,996        2.67       91.19
          5 |      2,351        2.10       93.29
          6 |      1,970        1.76       95.05
          7 |      1,645        1.47       96.51
          8 |      1,483        1.32       97.84
          9 |      1,306        1.16       99.00
         10 |      1,120        1.00      100.00
------------+-----------------------------------
      Total |    112,124      100.00

. 
. qui gen byte importer = N>0

. 
. assert N==0 | N==1 | N==2 | N>=3

. assert GN>=0 & (GN<=Gmax+0.01 | missing(GN))

. assert importer==0 | importer==1

. 
. 
. 
end of do-file

. ren N Ntest

. table Ni if Ni<=10 | (Ni<=155&Ni>=145), c(min Ntest max Ntest)

----------------------------------
Number of |
4-digit   |
imported  |
materials | min(Ntest)  max(Ntest)
----------+-----------------------
        0 |          0           0
        1 |          1           1
        2 |          2           2
        3 |          3           3
        4 |          4           4
        5 |          5           5
        6 |          6           6
        7 |          7           7
        8 |          8           8
        9 |          9           9
       10 |         10          10
      145 |        145         145
      146 |        146         146
      147 |        147         147
      148 |        148         148
      149 |        149         149
      150 |        150         150
      151 |        150         150
      152 |        150         150
      153 |        150         150
      154 |        150         150
      155 |        150         150
----------------------------------

. ** test that fixedcost-Ni relation properly inverts
. forval i=1/150 {
  2.         su Ntest if Ni==`i', meanonly
  3.         capture assert r(mean)==`i'
  4.         if _rc {
  5.                 di in red `i'
  6.                 su Ntest if Ni==`i'
  7.         }
  8. }
144

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
       Ntest |          0

. 
. restore

. 
. set more on

. capture log close

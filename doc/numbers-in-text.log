-------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /home/koren/projects/prod-AER-replicarion-package/code/../doc/numb
> ers-in-text.log
  log type:  text
 opened on:   4 Jul 2015, 16:51:24

. 
. /* frame of firms */
. tempfile frame

. use ../data/impmanuf, clear

. collapse (min) birth = year (max) death=year, by(id)

. save `frame', replace
(note: file /tmp/St41481.000001 not found)
file /tmp/St41481.000001 saved

. clear

. 
. /* sample definition */
. tempfile sample

. do load_specification table3_baseline 0

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Load the parameters estimated in a given specification, e.g.
> 
>         do load_specification table3_baseline 0
> */
. 
. set more off

. clear

. prog drop _all

. 
. local dir ../doc/mapreduce

. local inputfile `dir'/`1'/inputfile.dta

. local resultfile `dir'/`1'/`2'.csv

. 
. confirm file ../doc/mapreduce/`1'/TFP.dta

. confirm file `inputfile'

. confirm file `resultfile'

. confirm file map/`1'.do

. 
. 
. /* load parameters and set globals*/
. do map/`1'.do

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Set necessary constants for a specification. 
> This do-file cannot be run by itself, it is called by "estimate_specification
> .do".
> */
. 
. global datafile ../data/impmanuf

. 
. /* LHS variable*/
. global output PlnQ

. 
. 
. /* There are two kinds of state variables.
> $states are in the production function.
> $bygroup, $dummies
>     affect the investment decision, hence are in the proxy, but do not direct
> ly affect TFP. */
. 
. /* proxies for demand */
. global demand lnQs2 corrected_firm_demand 

. /* RHS variables identified in the first stage*/
. global free ""

. 
. /* proxy for productivity */
. global proxy inv

. /* proxy function is estimated separately for each group */
. global bygroup year

. /* simple linear dummies to include in both proxy and prod fcn */
. global dummies nace2year me

. /* state variables */
. global states lnK lnL afterforeign

. /* these states only enter linearly */
. global linear demand_1 demand_2  

. /* instruments should include all states and lags */
. global instruments lnK L.lnK lnL L.lnL afterforeign L.afterforeign demand_1  
> L.demand_1 demand_2 

. /* This is set of variables indexing IAP */
. global IAPgroup egy

. 
. /* product count is based on the number of 4-digit categories */
. global Ni N4i

. /* this is not a sector-specific estimation */
. global sector 0

. 
. /* define expression for sample */
. global sample 1==1

. 
. 
end of do-file

. 
. insheet using `resultfile', comma case
(407 vars, 1 obs)

. 
. * name parameters consistenly with text
. ren b_lnK alphastar

. ren b_lnL betastar

. ren b_PlnM gammastar

. 
. * count IAP groups
. reshape long ahat shat, i(egy) j(IAPgroup)
(note: j = 1)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->       1
Number of variables                 407   ->     408
j variable (1 values)                     ->   IAPgroup
xij variables:
                                  ahat1   ->   ahat
                                  shat1   ->   shat
-----------------------------------------------------------------------------

. su IAPgroup

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
    IAPgroup |          1           1           .          1          1

. local IAPgroups = r(max)

. reshape wide
(note: j = 1)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                        1   ->       1
Number of variables                 408   ->     407
j variable (1 values)          IAPgroup   ->   (dropped)
xij variables:
                                   ahat   ->   ahat1
                                   shat   ->   shat1
-----------------------------------------------------------------------------

. 
. * save Gn into a matrix
. reshape long Gn, i(egy) j(n)
(note: j = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
> 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
>  52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 7
> 7 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 1
> 02 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 12
> 1 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
>  141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
> 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 1
> 79 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 19
> 8 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
>  218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 
> 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 2
> 56 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 27
> 5 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
>  295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 
> 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 3
> 33 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 35
> 2 353 354 355 356 357 358 359 360 361 362 363 364 365 366)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->     367
Number of variables                 407   ->      42
j variable (367 values)                   ->   n
xij variables:
                      Gn0 Gn1 ... Gn366   ->   Gn
-----------------------------------------------------------------------------

. tsset n
        time variable:  n, 0 to 366
                delta:  1 unit

. mkmat Gn

. 
. reshape wide
(note: j = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
> 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
>  52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 7
> 7 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 1
> 02 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 12
> 1 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
>  141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
> 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 1
> 79 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 19
> 8 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
>  218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 
> 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 2
> 56 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 27
> 5 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
>  295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 
> 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 3
> 33 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 35
> 2 353 354 355 356 357 358 359 360 361 362 363 364 365 366)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                      367   ->       1
Number of variables                  42   ->     407
j variable (367 values)               n   ->   (dropped)
xij variables:
                                     Gn   ->   Gn0 Gn1 ... Gn366
-----------------------------------------------------------------------------

. 
. * save all other params into scalars
. drop Gn*

. unab params : _all

. foreach param in `params' {
  2.         scalar `param' = `param'[1]
  3. }

. 
. clear

. 
. * define functions to calculate Gn and its inverse
. /* mapping from N to GN and back */
. prog def GN
  1.     syntax newvarlist(max=1), n(string)
  2. 
.     qui gen `varlist' = .
  3.     forval i=1/367 {
  4.         qui replace `varlist' = Gn[`i',1] if `n'+1==`i'
  5.     }
  6. end

. 
. use ../doc/mapreduce/`1'/TFP

. drop __*

. 
. * create firm-specific variables
. qui su IAPgroup

. local IAPgroups = r(max)

. foreach X in a ahat shat B {
  2.         gen `X' = .
  3.         forval j=1/`IAPgroups' {
  4.                 replace `X' = `X'`j' if IAPgroup==`j'
  5.         }
  6. }
(127,472 missing values generated)
(127,472 real changes made)
(127,472 missing values generated)
(127,472 real changes made)
(127,472 missing values generated)
(127,472 real changes made)
(127,472 missing values generated)
(127,472 real changes made)

. drop Gn

. GN Gn, n(Ni)

. 
. gen nu = (PlnQ+log(price_2digit/100))-gammastar*(PlnM+log(price_material/100)
> )-gammastar*ahat*Gn-epsilonstar
(179 missing values generated)

. 
. * mean unobserved TFP shock
. gen ee = exp(epsilonstar)
(179 missing values generated)

. 
. * ensure that total industry revenue is same in model as in data
. * this does not have E(exp epsilon) yet
. gen data_revenue = exp(PlnQ+log(price_2digit/100))

. foreach X of var *_revenue {
  2.         egen mean_`X' = mean(`X'), by(nace2 year)
  3. }

. 
. gen weight = data_revenue/ee
(179 missing values generated)

. 
. egen sum_exp_e = sum(ee*weight) if !missing(ee,weight), by(nace2 year)
(179 missing values generated)

. egen sum_weight = sum(weight) if !missing(ee,weight), by(nace2 year)
(179 missing values generated)

. gen Eee = sum_exp_e/sum_weight
(179 missing values generated)

. 
. * See equation A6 in Appendix A
. gen model_revenue = gammastar^(gammastar/(1-gammastar))*exp((nu+gammastar*aha
> t*Gn)/(1-gammastar))*Eee^(1/(1-gammastar))
(179 missing values generated)

. gen pi0 = (1-gammastar)*gammastar^(gammastar/(1-gammastar))*exp(nu/(1-gammast
> ar))*Eee^(1/(1-gammastar))
(179 missing values generated)

. gen lnpi0 = ln(pi0)
(179 missing values generated)

. 
. *************** some automated tests
. * lnpi0 should be collinear with nu
. areg lnpi0 nu, a(nace2year)

Linear regression, absorbing indicators         Number of obs     =    127,293
                                                F(   1, 127030)   =          .
                                                Prob > F          =          .
                                                R-squared         =     1.0000
                                                Adj R-squared     =     1.0000
                                                Root MSE          =     0.0000

------------------------------------------------------------------------------
       lnpi0 |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
          nu |   4.038644          .        .       .            .           .
       _cons |  -2.067702          .        .       .            .           .
-------------+----------------------------------------------------------------
   nace2year |    F(261, 127030) =          .       .         (262 categories)

. assert e(r2)>0.9999

. * nu should have values whenever its components have
. count if !missing(PlnQ,PlnM,epsilonstar)
  127,293

. scalar n1 = r(N)

. count if !missing(nu)
  127,293

. assert n1 == r(N)

. * G(0)=0
. su Gn if Ni==0

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
          Gn |     78,273           0           0          0          0

. assert r(mean)==0

. * each Ni has a G(Ni)
. gen byte noGn = missing(Gn) & !missing(Ni)

. su noGn

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
        noGn |    127,472           0           0          0          0

. assert r(max)==0

. drop noGn

. * each IAPgroup has a separate ahat
. tab IAPgroup

 group(egy) |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |    127,472      100.00      100.00
------------+-----------------------------------
      Total |    127,472      100.00

. scalar n1 = r(r)

. tab ahat

       ahat |      Freq.     Percent        Cum.
------------+-----------------------------------
   .3267903 |    127,472      100.00      100.00
------------+-----------------------------------
      Total |    127,472      100.00

. assert n1 == r(r)

. 
. set more on

. 
. 
end of do-file

. save `sample', replace
(note: file /tmp/St41481.000002 not found)
file /tmp/St41481.000002 saved

. 
. scalar eta = 1/b_demand_1

. 
. di in gre "Importing all varieties increases revenue productivity by " in ye 
> (exp(ahat1*Gmax*gammastar)-1)*100 in gre " percent"
Importing all varieties increases revenue productivity by 22.496452 percent

. di in gre "Importing all varieties increases quantity productivity by " in ye
>  (exp(eta/(eta-1)*ahat1*Gmax*gammastar)-1)*100 in gre " percent"
Importing all varieties increases quantity productivity by 24.254386 percent

. 
. foreach t in 1992 2003 {
  2.         su afterforeign [aw=sales] if year==`t', meanonly
  3.         di in gre "Sales share of foreign firms in `t' " in ye r(mean)*100
>  in gre " percent"
  4. }
Sales share of foreign firms in 1992 20.894102 percent
Sales share of foreign firms in 2003 79.764545 percent

. 
. gen byte L_less_than_20 = employment<20

. su L_less_than_20 [aw=sales] if year<=1999, meanonly

. di in gre "Sales share of small firms in 1992-1999: " in ye r(mean)*100 in gr
> e " percent"
Sales share of small firms in 1992-1999: 7.2532106 percent

. 
. count
  127,472

. di in gre "Number of obersvations in sample " in ye r(N)
Number of obersvations in sample 127472

. 
. count if foreign==1 & L.foreign==0
  747

. di in gre "Number of firms becoming foreign " in ye r(N)
Number of firms becoming foreign 747

. count if foreign==0 & L.foreign==1
  1,034

. di in gre "Number of firms becoming domestic " in ye r(N)
Number of firms becoming domestic 1034

. egen divestment = max(afterforeign==1 & foreign==0), by(id)

. egen firmtag = tag(id)

. count if firmtag & !missing(firstforeign)
  5,009

. scalar number_of_foreign_firms = r(N)

. count if firmtag & !missing(firstforeign) & divestment==1
  1,326

. di in gre "Of the " in ye number_of_foreign_firms in gre " foreign firms, " i
> n ye r(N) in gre " divest for at least 1 year."
Of the 5009 foreign firms, 1326 divest for at least 1 year.

. 
. egen death = max(year), by(id)

. egen dies_as_domestic = max(death==year&afterforeign==1&foreign==0), by(id)

. count if dies_as_domestic & !missing(firstforeign ) & firmtag
  1,119

. di in gre "Of the " in ye number_of_foreign_firms in gre " foreign firms, " i
> n ye r(N) in gre " exits our sample as a domestic firm."
Of the 5009 foreign firms, 1119 exits our sample as a domestic firm.

. 
. 
. gen logN = ln(Ni)
(78,273 missing values generated)

. reg logN lnL afterforeign

      Source |       SS           df       MS      Number of obs   =    49,199
-------------+----------------------------------   F(2, 49196)     =  10755.91
       Model |  25162.4901         2   12581.245   Prob > F        =    0.0000
    Residual |  57544.7991    49,196  1.16970484   R-squared       =    0.3042
-------------+----------------------------------   Adj R-squared   =    0.3042
       Total |  82707.2892    49,198   1.6811108   Root MSE        =    1.0815

------------------------------------------------------------------------------
        logN |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
         lnL |   .3333739   .0028768   115.88   0.000     .3277354    .3390124
afterforeign |   .8588187   .0103063    83.33   0.000     .8386182    .8790192
       _cons |   .3367644   .0104541    32.21   0.000     .3162741    .3572547
------------------------------------------------------------------------------

. di in gre "Doubling employment raises the number of products by " in ye exp(l
> n(2)*_b[lnL])*100-100 in gre " percent"
Doubling employment raises the number of products by 25.995649 percent

. di in gre "Foreign firms import " in ye exp(_b[afterforeign])*100-100 in gre 
> " percent more products"
Foreign firms import 136.03707 percent more products

. 
. di in gre "Share of quality in TFP gain of importing " in ye (B1-1)/(exp(ahat
> 1)-1)*100 in gre " percent"
Share of quality in TFP gain of importing 48.160639 percent

. di in gre "Markup implied by eta " in ye eta/(eta-1)*100-100 in gre " percent
> "
Markup implied by eta 7.0222086 percent

. 
. gen TFP_loss = ahat1*Gn*gammastar

. su TFP_loss [aw=sales], meanonly

. di in gre "Stopping all imports would reduce aggregate revenue TFP by " in ye
>  100-exp(-r(mean))*100
Stopping all imports would reduce aggregate revenue TFP by 11.857267

. 
. **** switch to balanced sample
. use ../data/impmanuf, clear

. merge 1:1 id year using `sample'

    Result                           # of obs.
    -----------------------------------------
    not matched                        46,044
        from master                    46,044  (_merge==1)
        from using                          0  (_merge==2)

    matched                           127,472  (_merge==3)
    -----------------------------------------

. 
. su proc_s, meanonly

. di in gre "Fraction of processers in balanced firm sample " in ye r(mean)*100
>  in gre " percent"
Fraction of processers in balanced firm sample 9.2983282 percent

. 
. * other specifications
. clear all

. do load_specification table4_foreign 0

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Load the parameters estimated in a given specification, e.g.
> 
>         do load_specification table3_baseline 0
> */
. 
. set more off

. clear

. prog drop _all

. 
. local dir ../doc/mapreduce

. local inputfile `dir'/`1'/inputfile.dta

. local resultfile `dir'/`1'/`2'.csv

. 
. confirm file ../doc/mapreduce/`1'/TFP.dta

. confirm file `inputfile'

. confirm file `resultfile'

. confirm file map/`1'.do

. 
. 
. /* load parameters and set globals*/
. do map/`1'.do

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Set necessary constants for a specification. 
> This do-file cannot be run by itself, it is called by "estimate_specification
> .do".
> */
. 
. global datafile ../data/impmanuf

. 
. /* LHS variable*/
. global output PlnQ

. 
. /* proxies for demand */
. global demand lnQs2 corrected_firm_demand

. /* RHS variables identified in the first stage*/
. global free ""

. 
. /* There are two kinds of state variables.
> $states are in the production function.
> $bygroup, $dummies
>     affect the investment decision, hence are in the proxy, but do not direct
> ly affect TFP. */
. 
. /* proxy for productivity */
. global proxy inv

. /* proxy function is estimated separately for each group */
. global bygroup year

. /* simple linear dummies to include in both proxy and prod fcn */
. * these are now included separately, first is the longest, to absorb
. global dummies nace2year me

. /* state variables */
. global states lnK lnL afterforeign 

. /* these states only enter linearly */
. global linear demand_1 demand_2  

. /* instruments should include all states and lags */
. global instruments lnK L.lnK lnL L.lnL afterforeign L.afterforeign demand_1 L
> .demand_1 demand_2  

. /* separate import-augmenting productivity for foreign and domestic firms */
. global IAPgroup afterforeign

. 
. 
. /* product count is based on the number of 4-digit categories */
. global Ni N4i

. /* this is not a sector-specific estimation */
. global sector 0

. 
. /* define expression for sample */
. global sample 1==1

. 
. 
. 
end of do-file

. 
. insheet using `resultfile', comma case
(412 vars, 1 obs)

. 
. * name parameters consistenly with text
. ren b_lnK alphastar

. ren b_lnL betastar

. ren b_PlnM gammastar

. 
. * count IAP groups
. reshape long ahat shat, i(egy) j(IAPgroup)
(note: j = 1 2)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->       2
Number of variables                 412   ->     411
j variable (2 values)                     ->   IAPgroup
xij variables:
                            ahat1 ahat2   ->   ahat
                            shat1 shat2   ->   shat
-----------------------------------------------------------------------------

. su IAPgroup

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
    IAPgroup |          2         1.5    .7071068          1          2

. local IAPgroups = r(max)

. reshape wide
(note: j = 1 2)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                        2   ->       1
Number of variables                 411   ->     412
j variable (2 values)          IAPgroup   ->   (dropped)
xij variables:
                                   ahat   ->   ahat1 ahat2
                                   shat   ->   shat1 shat2
-----------------------------------------------------------------------------

. 
. * save Gn into a matrix
. reshape long Gn, i(egy) j(n)
(note: j = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
> 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
>  52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 7
> 7 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 1
> 02 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 12
> 1 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
>  141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
> 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 1
> 79 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 19
> 8 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
>  218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 
> 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 2
> 56 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 27
> 5 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
>  295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 
> 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 3
> 33 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 35
> 2 353 354 355 356 357 358 359 360 361 362 363 364 365 366)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->     367
Number of variables                 412   ->      47
j variable (367 values)                   ->   n
xij variables:
                      Gn0 Gn1 ... Gn366   ->   Gn
-----------------------------------------------------------------------------

. tsset n
        time variable:  n, 0 to 366
                delta:  1 unit

. mkmat Gn

. 
. reshape wide
(note: j = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
> 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
>  52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 7
> 7 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 1
> 02 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 12
> 1 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
>  141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
> 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 1
> 79 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 19
> 8 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
>  218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 
> 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 2
> 56 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 27
> 5 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
>  295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 
> 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 3
> 33 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 35
> 2 353 354 355 356 357 358 359 360 361 362 363 364 365 366)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                      367   ->       1
Number of variables                  47   ->     412
j variable (367 values)               n   ->   (dropped)
xij variables:
                                     Gn   ->   Gn0 Gn1 ... Gn366
-----------------------------------------------------------------------------

. 
. * save all other params into scalars
. drop Gn*

. unab params : _all

. foreach param in `params' {
  2.         scalar `param' = `param'[1]
  3. }

. 
. clear

. 
. * define functions to calculate Gn and its inverse
. /* mapping from N to GN and back */
. prog def GN
  1.     syntax newvarlist(max=1), n(string)
  2. 
.     qui gen `varlist' = .
  3.     forval i=1/367 {
  4.         qui replace `varlist' = Gn[`i',1] if `n'+1==`i'
  5.     }
  6. end

. 
. use ../doc/mapreduce/`1'/TFP

. drop __*

. 
. * create firm-specific variables
. qui su IAPgroup

. local IAPgroups = r(max)

. foreach X in a ahat shat B {
  2.         gen `X' = .
  3.         forval j=1/`IAPgroups' {
  4.                 replace `X' = `X'`j' if IAPgroup==`j'
  5.         }
  6. }
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)
(127,472 missing values generated)
(103,929 real changes made)
(23,543 real changes made)

. drop Gn

. GN Gn, n(Ni)

. 
. gen nu = (PlnQ+log(price_2digit/100))-gammastar*(PlnM+log(price_material/100)
> )-gammastar*ahat*Gn-epsilonstar
(179 missing values generated)

. 
. * mean unobserved TFP shock
. gen ee = exp(epsilonstar)
(179 missing values generated)

. 
. * ensure that total industry revenue is same in model as in data
. * this does not have E(exp epsilon) yet
. gen data_revenue = exp(PlnQ+log(price_2digit/100))

. foreach X of var *_revenue {
  2.         egen mean_`X' = mean(`X'), by(nace2 year)
  3. }

. 
. gen weight = data_revenue/ee
(179 missing values generated)

. 
. egen sum_exp_e = sum(ee*weight) if !missing(ee,weight), by(nace2 year)
(179 missing values generated)

. egen sum_weight = sum(weight) if !missing(ee,weight), by(nace2 year)
(179 missing values generated)

. gen Eee = sum_exp_e/sum_weight
(179 missing values generated)

. 
. * See equation A6 in Appendix A
. gen model_revenue = gammastar^(gammastar/(1-gammastar))*exp((nu+gammastar*aha
> t*Gn)/(1-gammastar))*Eee^(1/(1-gammastar))
(179 missing values generated)

. gen pi0 = (1-gammastar)*gammastar^(gammastar/(1-gammastar))*exp(nu/(1-gammast
> ar))*Eee^(1/(1-gammastar))
(179 missing values generated)

. gen lnpi0 = ln(pi0)
(179 missing values generated)

. 
. *************** some automated tests
. * lnpi0 should be collinear with nu
. areg lnpi0 nu, a(nace2year)

Linear regression, absorbing indicators         Number of obs     =    127,293
                                                F(   1, 127030)   =          .
                                                Prob > F          =          .
                                                R-squared         =     1.0000
                                                Adj R-squared     =     1.0000
                                                Root MSE          =     0.0000

------------------------------------------------------------------------------
       lnpi0 |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
          nu |   4.038644          .        .       .            .           .
       _cons |  -2.068071          .        .       .            .           .
-------------+----------------------------------------------------------------
   nace2year |    F(261, 127030) =          .       .         (262 categories)

. assert e(r2)>0.9999

. * nu should have values whenever its components have
. count if !missing(PlnQ,PlnM,epsilonstar)
  127,293

. scalar n1 = r(N)

. count if !missing(nu)
  127,293

. assert n1 == r(N)

. * G(0)=0
. su Gn if Ni==0

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
          Gn |     78,273           0           0          0          0

. assert r(mean)==0

. * each Ni has a G(Ni)
. gen byte noGn = missing(Gn) & !missing(Ni)

. su noGn

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
        noGn |    127,472           0           0          0          0

. assert r(max)==0

. drop noGn

. * each IAPgroup has a separate ahat
. tab IAPgroup

group(after |
   foreign) |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |    103,929       81.53       81.53
          2 |     23,543       18.47      100.00
------------+-----------------------------------
      Total |    127,472      100.00

. scalar n1 = r(r)

. tab ahat

       ahat |      Freq.     Percent        Cum.
------------+-----------------------------------
   .2710939 |    103,929       81.53       81.53
    .390417 |     23,543       18.47      100.00
------------+-----------------------------------
      Total |    127,472      100.00

. assert n1 == r(r)

. 
. set more on

. 
. 
end of do-file

. di in gre "Foreign firms gain " in ye B2/B1*100-100 in gre " percent more for
>  each dollar of imported input."
Foreign firms gain 23.933157 percent more for each dollar of imported input.

. 
. clear all

. insheet using ../doc/mapreduce/table5_year/estimates.csv
(3 vars, 71 obs)

. keep parameter estimate

. gen egy = 1

. ren estimate b_

. 
. reshape wide b_, i(egy) j(parameter) string
(note: j = B1 B2 B3 B4 B5 B6 B7 a1 a2 a3 a4 a5 a6 a7 ahat1 ahat2 ahat3 ahat4 ah
> at5 ahat6 ahat7 b_PlnM b_afterforeign b_demand_1 b_demand_2 b_lnK b_lnL coef5
> 0a8 coef51ahat8 coef52s8 coef53shat8 coef54B8 coef56Nfirms lambda nace2 p_B1_
> EDF p_B2_B1_EDF p_B2_EDF p_B3_B2_EDF p_B3_EDF p_B4_B3_EDF p_B4_EDF p_B5_B4_ED
> F p_B5_EDF p_B6_B5_EDF p_B6_EDF p_B7_B6_EDF p_B7_EDF p_a1_EDF p_a2_EDF p_a3_E
> DF p_a4_EDF p_a5_EDF p_a6_EDF p_a7_EDF s1 s2 s3 s4 s5 s6 s7 seed shat1 shat2 
> shat3 shat4 shat5 shat6 shat7 theta)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                       71   ->       1
Number of variables                   3   ->      72
j variable (71 values)        parameter   ->   (dropped)
xij variables:
                                     b_   ->   b_B1 b_B2 ... b_theta
-----------------------------------------------------------------------------

. ren b_* *

. keep egy a? ahat? s? shat?

. reshape long a ahat s shat, i(egy) j(IAP)
(note: j = 1 2 3 4 5 6 7)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->       7
Number of variables                  29   ->       6
j variable (7 values)                     ->   IAP
xij variables:
                           a1 a2 ... a7   ->   a
                  ahat1 ahat2 ... ahat7   ->   ahat
                           s1 s2 ... s7   ->   s
                  shat1 shat2 ... shat7   ->   shat
-----------------------------------------------------------------------------

. 
. foreach X in a s {
  2.         gen absdiff_`X' = abs(`X'-`X'hat)
  3.         su absdiff_`X'
  4. 
.         di in gre "Mean absolute difference between `X' and `X'hat is " in ye
>  r(mean)
  5. }

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
   absdiff_a |          7    .0292167    .0253063   .0011939   .0769116
Mean absolute difference between a and ahat is .02921673

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
   absdiff_s |          7     .069783    .0583175   .0028586    .170896
Mean absolute difference between s and shat is .06978299

. 
. capture log close

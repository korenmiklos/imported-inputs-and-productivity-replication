-------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /home/koren/projects/prod-AER-replicarion-package/code/../doc/impo
> rt_margins.log
  log type:  text
 opened on:   2 Jul 2015, 20:52:53

. 
. local datastore ../data

. 
. /* sample definition */
. tempfile sample

. do load_specification table3_baseline 0

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Load the parameters estimated in a given specification, e.g.
> 
>         do load_specification table3_baseline 0
> */
. 
. set more off

. clear

. prog drop _all

. 
. local dir ../doc/mapreduce

. local inputfile `dir'/`1'/inputfile.dta

. local resultfile `dir'/`1'/`2'.csv

. 
. confirm file ../doc/mapreduce/`1'/TFP.dta

. confirm file `inputfile'

. confirm file `resultfile'

. confirm file map/`1'.do

. 
. 
. /* load parameters and set globals*/
. do map/`1'.do

. /*
> Replication code for "Imported Inputs and Productivity". Please cite as
>         Halpern, Koren and Szeidl. 2015. "Imported Inputs and Productivity." 
> American Economic Review.
> 
> Set necessary constants for a specification. 
> This do-file cannot be run by itself, it is called by "estimate_specification
> .do".
> */
. 
. global datafile ../data/impmanuf

. 
. /* LHS variable*/
. global output PlnQ

. 
. 
. /* There are two kinds of state variables.
> $states are in the production function.
> $bygroup, $dummies
>     affect the investment decision, hence are in the proxy, but do not direct
> ly affect TFP. */
. 
. /* proxies for demand */
. global demand lnQs2 corrected_firm_demand 

. /* RHS variables identified in the first stage*/
. global free ""

. 
. /* proxy for productivity */
. global proxy inv

. /* proxy function is estimated separately for each group */
. global bygroup year

. /* simple linear dummies to include in both proxy and prod fcn */
. global dummies nace2year me

. /* state variables */
. global states lnK lnL afterforeign

. /* these states only enter linearly */
. global linear demand_1 demand_2  

. /* instruments should include all states and lags */
. global instruments lnK L.lnK lnL L.lnL afterforeign L.afterforeign demand_1  
> L.demand_1 demand_2 

. /* This is set of variables indexing IAP */
. global IAPgroup egy

. 
. /* product count is based on the number of 4-digit categories */
. global Ni N4i

. /* this is not a sector-specific estimation */
. global sector 0

. 
. /* define expression for sample */
. global sample 1==1

. 
. 
end of do-file

. 
. insheet using `resultfile', comma case
(407 vars, 1 obs)

. 
. * name parameters consistenly with text
. ren b_lnK alphastar

. ren b_lnL betastar

. ren b_PlnM gammastar

. 
. * count IAP groups
. reshape long ahat shat, i(egy) j(IAPgroup)
(note: j = 1)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->       1
Number of variables                 407   ->     408
j variable (1 values)                     ->   IAPgroup
xij variables:
                                  ahat1   ->   ahat
                                  shat1   ->   shat
-----------------------------------------------------------------------------

. su IAPgroup

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
    IAPgroup |          1           1           .          1          1

. local IAPgroups = r(max)

. reshape wide
(note: j = 1)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                        1   ->       1
Number of variables                 408   ->     407
j variable (1 values)          IAPgroup   ->   (dropped)
xij variables:
                                   ahat   ->   ahat1
                                   shat   ->   shat1
-----------------------------------------------------------------------------

. 
. * save Gn into a matrix
. reshape long Gn, i(egy) j(n)
(note: j = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
> 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
>  52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 7
> 7 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 1
> 02 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 12
> 1 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
>  141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
> 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 1
> 79 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 19
> 8 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
>  218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 
> 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 2
> 56 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 27
> 5 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
>  295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 
> 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 3
> 33 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 35
> 2 353 354 355 356 357 358 359 360 361 362 363 364 365 366)

Data                               wide   ->   long
-----------------------------------------------------------------------------
Number of obs.                        1   ->     367
Number of variables                 407   ->      42
j variable (367 values)                   ->   n
xij variables:
                      Gn0 Gn1 ... Gn366   ->   Gn
-----------------------------------------------------------------------------

. tsset n
        time variable:  n, 0 to 366
                delta:  1 unit

. mkmat Gn

. 
. reshape wide
(note: j = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
> 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
>  52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 7
> 7 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 1
> 02 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 12
> 1 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
>  141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 
> 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 1
> 79 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 19
> 8 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217
>  218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 
> 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 2
> 56 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 27
> 5 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294
>  295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 
> 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 3
> 33 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 35
> 2 353 354 355 356 357 358 359 360 361 362 363 364 365 366)

Data                               long   ->   wide
-----------------------------------------------------------------------------
Number of obs.                      367   ->       1
Number of variables                  42   ->     407
j variable (367 values)               n   ->   (dropped)
xij variables:
                                     Gn   ->   Gn0 Gn1 ... Gn366
-----------------------------------------------------------------------------

. 
. * save all other params into scalars
. drop Gn*

. unab params : _all

. foreach param in `params' {
  2.         scalar `param' = `param'[1]
  3. }

. 
. clear

. 
. * define functions to calculate Gn and its inverse
. /* mapping from N to GN and back */
. prog def GN
  1.     syntax newvarlist(max=1), n(string)
  2. 
.     qui gen `varlist' = .
  3.     forval i=1/367 {
  4.         qui replace `varlist' = Gn[`i',1] if `n'+1==`i'
  5.     }
  6. end

. 
. use ../doc/mapreduce/`1'/TFP

. drop __*

. 
. * create firm-specific variables
. qui su IAPgroup

. local IAPgroups = r(max)

. foreach X in a ahat shat B {
  2.         gen `X' = .
  3.         forval j=1/`IAPgroups' {
  4.                 replace `X' = `X'`j' if IAPgroup==`j'
  5.         }
  6. }
(127,472 missing values generated)
(127,472 real changes made)
(127,472 missing values generated)
(127,472 real changes made)
(127,472 missing values generated)
(127,472 real changes made)
(127,472 missing values generated)
(127,472 real changes made)

. drop Gn

. GN Gn, n(Ni)

. 
. gen nu = (PlnQ+log(price_2digit/100))-gammastar*(PlnM+log(price_material/100)
> )-gammastar*ahat*Gn-epsilonstar
(179 missing values generated)

. 
. * mean unobserved TFP shock
. gen ee = exp(epsilonstar)
(179 missing values generated)

. 
. * ensure that total industry revenue is same in model as in data
. * this does not have E(exp epsilon) yet
. gen data_revenue = exp(PlnQ+log(price_2digit/100))

. foreach X of var *_revenue {
  2.         egen mean_`X' = mean(`X'), by(nace2 year)
  3. }

. 
. gen weight = data_revenue/ee
(179 missing values generated)

. 
. egen sum_exp_e = sum(ee*weight) if !missing(ee,weight), by(nace2 year)
(179 missing values generated)

. egen sum_weight = sum(weight) if !missing(ee,weight), by(nace2 year)
(179 missing values generated)

. gen Eee = sum_exp_e/sum_weight
(179 missing values generated)

. 
. * See equation A6 in Appendix A
. gen model_revenue = gammastar^(gammastar/(1-gammastar))*exp((nu+gammastar*aha
> t*Gn)/(1-gammastar))*Eee^(1/(1-gammastar))
(179 missing values generated)

. gen pi0 = (1-gammastar)*gammastar^(gammastar/(1-gammastar))*exp(nu/(1-gammast
> ar))*Eee^(1/(1-gammastar))
(179 missing values generated)

. gen lnpi0 = ln(pi0)
(179 missing values generated)

. 
. *************** some automated tests
. * lnpi0 should be collinear with nu
. areg lnpi0 nu, a(nace2year)

Linear regression, absorbing indicators         Number of obs     =    127,293
                                                F(   1, 127030)   =          .
                                                Prob > F          =          .
                                                R-squared         =     1.0000
                                                Adj R-squared     =     1.0000
                                                Root MSE          =     0.0000

------------------------------------------------------------------------------
       lnpi0 |      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
-------------+----------------------------------------------------------------
          nu |   4.038644          .        .       .            .           .
       _cons |  -2.067702          .        .       .            .           .
-------------+----------------------------------------------------------------
   nace2year |    F(261, 127030) =          .       .         (262 categories)

. assert e(r2)>0.9999

. * nu should have values whenever its components have
. count if !missing(PlnQ,PlnM,epsilonstar)
  127,293

. scalar n1 = r(N)

. count if !missing(nu)
  127,293

. assert n1 == r(N)

. * G(0)=0
. su Gn if Ni==0

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
          Gn |     78,273           0           0          0          0

. assert r(mean)==0

. * each Ni has a G(Ni)
. gen byte noGn = missing(Gn) & !missing(Ni)

. su noGn

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
        noGn |    127,472           0           0          0          0

. assert r(max)==0

. drop noGn

. * each IAPgroup has a separate ahat
. tab IAPgroup

 group(egy) |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |    127,472      100.00      100.00
------------+-----------------------------------
      Total |    127,472      100.00

. scalar n1 = r(r)

. tab ahat

       ahat |      Freq.     Percent        Cum.
------------+-----------------------------------
   .3267903 |    127,472      100.00      100.00
------------+-----------------------------------
      Total |    127,472      100.00

. assert n1 == r(r)

. 
. set more on

. 
. 
end of do-file

. save `sample', replace
(note: file /tmp/St28825.000001 not found)
file /tmp/St28825.000001 saved

. 
. /* frame of firms */
. tempfile frame

. use ../data/impmanuf, clear

. collapse (min) birth = year (max) death=year, by(id)

. save `frame', replace
(note: file /tmp/St28825.000002 not found)
file /tmp/St28825.000002 saved

. 
. /* read import customs stats */
. use `datastore'/customs/import/hs6imports, clear

. ren id7 id

. 
. /* merge BEC codes */
. csvmerge hs6 using `datastore'/customs/concordance/hs6bec.csv
(2 vars, 5,111 obs)
(note: file /tmp/St28825.000003 not found)
file /tmp/St28825.000003 saved
(note: you are using old merge syntax; see [D] merge for new syntax)
variable hs6 does not uniquely identify observations in the master data

. tab _

     _merge |      Freq.     Percent        Cum.
------------+-----------------------------------
          1 |    201,620        2.35        2.35
          2 |         14        0.00        2.35
          3 |  8,376,722       97.65      100.00
------------+-----------------------------------
      Total |  8,578,356      100.00

. drop _

. 
. /* for the count */
. replace i_ft = . if i_ft==0
(18,776 real changes made, 18,776 to missing)

. 
. compress
  variable i_ud was double now long
  (34,313,424 bytes saved)

. tab bec

        bec |      Freq.     Percent        Cum.
------------+-----------------------------------
          7 |      1,938        0.02        0.02
         11 |     62,460        0.75        0.77
         12 |     93,847        1.12        1.89
         21 |     81,915        0.98        2.87
         22 |  3,138,426       37.47       40.33
         31 |      2,092        0.02       40.36
         32 |     32,233        0.38       40.74
         41 |  1,361,689       16.26       57.00
         42 |  1,368,580       16.34       73.34
         51 |    109,692        1.31       74.65
         52 |     86,625        1.03       75.68
         53 |    391,514        4.67       80.35
         61 |    245,471        2.93       83.28
         62 |    915,790       10.93       94.22
         63 |    484,464        5.78      100.00
------------+-----------------------------------
      Total |  8,376,736      100.00

. /* 1 is for intermediate, 2 for capital, 3 for consumption */
. 
. recode bec 11 21 22 31 32 42 53 = 1 /*
> */         41 51 52 = 2 /*
> */          12 61 62 63 = 1 /*
> */          * = 1
(bec: 8578356 changes made)

. 
. keep if bec==1
(1,558,006 observations deleted)

. 
. * collapse to 4 digit
. gen hs4 = int(hs6/100)
(6 missing values generated)

. collapse (sum) i_ft, by(id hs4 year)

. 
. /* appearance of HS4 in the entire sample. we want to understand HS revisions
>  */
. preserve

. collapse (sum) i_ft, by(hs4 year)

. drop if i_ft==0 | missing(i_ft)
(19 observations deleted)

. collapse (min) product_entry = year, by(hs4)

. tab product_entry

 (min) year |      Freq.     Percent        Cum.
------------+-----------------------------------
       1991 |      1,148       97.12       97.12
       1992 |         17        1.44       98.56
       1993 |          2        0.17       98.73
       1996 |          3        0.25       98.98
       1998 |          1        0.08       99.07
       2001 |          1        0.08       99.15
       2002 |         10        0.85      100.00
------------+-----------------------------------
      Total |      1,182      100.00

. tempfile product_entry

. save `product_entry', replace
(note: file /tmp/St28825.000004 not found)
file /tmp/St28825.000004 saved

. restore

. 
. /* drop non-imported products */
. drop if i_ft==0
(5,567 observations deleted)

. drop if year==1991
(173,174 observations deleted)

. 
. * calculate share of top 1 and 5 products
. egen N = count(i_ft), by(id year)

. egen total = sum(i_ft), by(id year)

. gen share = i_ft/total

. egen rank = rank(-share), by(id year) unique

. 
. su share if N>=5 & rank==1, meanonly

. di in gre "Share of top product " in ye r(mean)*100 in gre " percent"
Share of top product 54.182063 percent

. su share if N>=5 & rank==5, meanonly

. di in gre "Share of fifth product " in ye r(mean)*100 in gre " percent"
Share of fifth product 3.4275781 percent

. 
. * merge manufacturing sample, drop processers
. merge m:1 id year using ../data/impmanuf, keepusing(nace98 nace2 proc_sales m
> eanmanuf pt price_2digit foreign commonstock lnK lnL PlnM) keep(match)

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                         1,113,675  (_merge==3)
    -----------------------------------------

. 
. * for dynamic decomposition need firms in sample for all years or not at all
. egen meanproc = mean(proc_s), by(id)
(244 missing values generated)

. drop if meanproc>=0.5
(412,358 observations deleted)

. drop if meanmanuf<0.5
(65,451 observations deleted)

. egen sometimes_zero_commonstock = max(commonstock==0), by(id)

. * define sometimeszero after processers are dropped to max obs
. drop if sometimes_zero_commonstock
(5,139 observations deleted)

. drop _merge

. 
. * deflate imports by producer price index
. replace i_ft = i_ft/price_2digit*100
(577,783 real changes made)

. 
. * emulate annual decomposition for entire sample
. if "`1'"=="longrun" {
.         keep if year==1992 | year==2003
(532,683 observations deleted)
.         replace year=1993 if year==2003
(70,247 real changes made)
. }

. 
. egen firmproduct = group(id hs4)

. tsset firmproduct year
       panel variable:  firmproduct (unbalanced)
        time variable:  year, 1992 to 1993
                delta:  1 unit

. gen newproduct = (L.i_ft==0 | missing(L.i_ft))*i_ft

. gen droppedproduct = (F.i_ft==0 | missing(F.i_ft))*i_ft

. * first time product ever appears
. merge m:1 hs4 using `product_entry'

    Result                           # of obs.
    -----------------------------------------
    not matched                            50
        from master                         0  (_merge==1)
        from using                         50  (_merge==2)

    matched                            98,044  (_merge==3)
    -----------------------------------------

. drop _m

. gen new_hs4_code = (year==product_entry)*i_ft
(50 missing values generated)

. 
. * collapse by firms first
. collapse (sum) i_ft newproduct droppedproduct new_hs4_code, by(id year)

. merge m:1 id using `frame', keep(match)

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                             8,262  (_merge==3)
    -----------------------------------------

. drop _m

. 
. * emulate annual decomposition for entire sample
. if "`1'"=="longrun" {
.         gen enteringfirm = (birth>1992 & death>=2003)*i_ft
.         gen exitingfirm = (birth<=1992 & death<2003)*i_ft
. }

. else {
.         gen enteringfirm = (year==birth)*i_ft
.         gen exitingfirm = (year==death)*i_ft
. }

. * now look at firm entry/exit
. tsset id year
       panel variable:  id (unbalanced)
        time variable:  year, 1992 to 1993
                delta:  1 unit

. gen newfirm = (L.i_ft==0 | missing(L.i_ft))*i_ft

. gen droppedfirm = (F.i_ft==0 | missing(F.i_ft))*i_ft

. 
. * if all products are new, do not double count them
. replace newproduct=0 if newfirm
(7,375 real changes made)

. replace droppedproduct=0 if droppedfirm
(7,375 real changes made)

. 
. ren i_ft totalimport

. 
. * change in imports w/o change in extensive margin
. gen intensive = (totalimport-newproduct-newfirm)-(L.totalimport-L.droppedfirm
> -L.droppedproduct)
(7,375 missing values generated)

. egen rank = rank(-newproduct), by(year) unique

. l id newproduct if year==1996 & rank<=5

. collapse (sum) totalimport intensive newproduct newfirm  droppedproduct dropp
> edfirm enteringfirm exitingfirm new_hs4_code, by(year)

. tsset year
        time variable:  year, 1992 to 1993
                delta:  1 unit

. 
. * which firms enter and which start importing
. replace newfirm = newfirm-enteringfirm
(1 real change made)

. replace droppedfirm = droppedfirm-exitingfirm
(1 real change made)

. 
. gen Dimport = D.totalimport
(1 missing value generated)

. 
. foreach X of var dropped* exitingfirm {
  2.     gen L`X' = -L.`X'
  3. }
(1 missing value generated)
(1 missing value generated)
(1 missing value generated)

. 
. foreach X of var Dimport intensive newfirm newproduct enteringfirm Lexitingfi
> rm Ldroppedfirm Ldroppedproduct new_hs4_code {
  2.     replace `X' = `X'/L.totalimport*100
  3. }
(1 real change made)
(2 real changes made, 1 to missing)
(2 real changes made, 1 to missing)
(2 real changes made, 1 to missing)
(2 real changes made, 1 to missing)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made, 1 to missing)

. su totalimport if year==1995

    Variable |        Obs        Mean    Std. Dev.       Min        Max
-------------+---------------------------------------------------------
 totalimport |          0

. * imports in millions of dollars
. replace totalimport = totalimport/210.51/1e+6
(2 real changes made)

. 
. order year totalimport Dimport intensive enteringfirm newfirm newproduct Lexi
> tingfirm Ldroppedfirm Ldroppedproduct new_hs4_code

. 
. * round percentages to single digits
. foreach X of var intensive enteringfirm newfirm newproduct Lexitingfirm Ldrop
> pedfirm Ldroppedproduct new_hs4_code {
  2.         replace `X' = round(`X'*10)/10 
  3. }
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(1 real change made)
(0 real changes made)

. * more human readable names
. ren Dimport import_growth

. ren intensive intensive_margin

. ren enteringfirm new_firms

. ren newfirm new_importers

. ren newproduct new_products

. ren Lexitingfirm stopping_firms

. ren Ldroppedfirm stopping_importers

. ren Ldroppedproduct dropped_products

. 
. outsheet using ../text/tables/table2`1'-import-margins.csv, comma names repla
> ce
(note: file ../text/tables/table2longrun-import-margins.csv not found)

. 
. log close
      name:  <unnamed>
       log:  /home/koren/projects/prod-AER-replicarion-package/code/../doc/impo
> rt_margins.log
  log type:  text
 closed on:   2 Jul 2015, 20:58:05
-------------------------------------------------------------------------------
